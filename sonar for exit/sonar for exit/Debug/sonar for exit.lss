
sonar for exit.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000060e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000014  00800060  0000060e  000006a2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000008c  00800074  00800074  000006b6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006b6  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000088  00000000  00000000  000006e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000aaf  00000000  00000000  0000076e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000002f3  00000000  00000000  0000121d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003c1  00000000  00000000  00001510  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000188  00000000  00000000  000018d4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000033e  00000000  00000000  00001a5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000071c  00000000  00000000  00001d9a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000078  00000000  00000000  000024b6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 08 01 	jmp	0x210	; 0x210 <__vector_1>
   8:	0c 94 38 01 	jmp	0x270	; 0x270 <__vector_2>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__vector_13>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e0       	ldi	r30, 0x0E	; 14
  68:	f6 e0       	ldi	r31, 0x06	; 6
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 37       	cpi	r26, 0x74	; 116
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	21 e0       	ldi	r18, 0x01	; 1
  78:	a4 e7       	ldi	r26, 0x74	; 116
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 30       	cpi	r26, 0x00	; 0
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 93 01 	call	0x326	; 0x326 <main>
  8a:	0c 94 05 03 	jmp	0x60a	; 0x60a <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <USARTInit>:
#include <inttypes.h>


void USARTInit(uint16_t ubrrvalue)
{	
	UQFront=UQEnd=-1;
  92:	2f ef       	ldi	r18, 0xFF	; 255
  94:	3f ef       	ldi	r19, 0xFF	; 255
  96:	30 93 7f 00 	sts	0x007F, r19
  9a:	20 93 7e 00 	sts	0x007E, r18
  9e:	30 93 7d 00 	sts	0x007D, r19
  a2:	20 93 7c 00 	sts	0x007C, r18
	
	UBRRH=(unsigned char)(ubrrvalue>>8);
  a6:	90 bd       	out	0x20, r25	; 32
	UBRRL=(unsigned char)ubrrvalue;
  a8:	89 b9       	out	0x09, r24	; 9
	UCSRA = 0 ;
  aa:	1b b8       	out	0x0b, r1	; 11
	UCSRC=(1<<URSEL)|(3<<UCSZ0);
  ac:	86 e8       	ldi	r24, 0x86	; 134
  ae:	80 bd       	out	0x20, r24	; 32
	UCSRB=(1<<RXCIE)|(1<<RXEN)|(1<<TXEN);
  b0:	88 e9       	ldi	r24, 0x98	; 152
  b2:	8a b9       	out	0x0a, r24	; 10
	
	sei();
  b4:	78 94       	sei
  b6:	08 95       	ret

000000b8 <__vector_13>:

}

ISR(USART_RXC_vect)
{
  b8:	1f 92       	push	r1
  ba:	0f 92       	push	r0
  bc:	0f b6       	in	r0, 0x3f	; 63
  be:	0f 92       	push	r0
  c0:	11 24       	eor	r1, r1
  c2:	2f 93       	push	r18
  c4:	3f 93       	push	r19
  c6:	4f 93       	push	r20
  c8:	8f 93       	push	r24
  ca:	9f 93       	push	r25
  cc:	ef 93       	push	r30
  ce:	ff 93       	push	r31
	char data=UDR;
  d0:	4c b1       	in	r20, 0x0c	; 12
	if(((UQEnd==RECEIVE_BUFF_SIZE-1) && UQFront==0) || ((UQEnd+1)==UQFront))
  d2:	80 91 7e 00 	lds	r24, 0x007E
  d6:	90 91 7f 00 	lds	r25, 0x007F
  da:	8f 37       	cpi	r24, 0x7F	; 127
  dc:	91 05       	cpc	r25, r1
  de:	31 f4       	brne	.+12     	; 0xec <__vector_13+0x34>
  e0:	80 91 7c 00 	lds	r24, 0x007C
  e4:	90 91 7d 00 	lds	r25, 0x007D
  e8:	89 2b       	or	r24, r25
  ea:	69 f0       	breq	.+26     	; 0x106 <__vector_13+0x4e>
  ec:	20 91 7e 00 	lds	r18, 0x007E
  f0:	30 91 7f 00 	lds	r19, 0x007F
  f4:	80 91 7c 00 	lds	r24, 0x007C
  f8:	90 91 7d 00 	lds	r25, 0x007D
  fc:	2f 5f       	subi	r18, 0xFF	; 255
  fe:	3f 4f       	sbci	r19, 0xFF	; 255
 100:	28 17       	cp	r18, r24
 102:	39 07       	cpc	r19, r25
 104:	a1 f4       	brne	.+40     	; 0x12e <__vector_13+0x76>
	{
		UQFront++;
 106:	80 91 7c 00 	lds	r24, 0x007C
 10a:	90 91 7d 00 	lds	r25, 0x007D
 10e:	01 96       	adiw	r24, 0x01	; 1
 110:	90 93 7d 00 	sts	0x007D, r25
 114:	80 93 7c 00 	sts	0x007C, r24
		if(UQFront==RECEIVE_BUFF_SIZE) UQFront=0;
 118:	80 91 7c 00 	lds	r24, 0x007C
 11c:	90 91 7d 00 	lds	r25, 0x007D
 120:	80 38       	cpi	r24, 0x80	; 128
 122:	91 05       	cpc	r25, r1
 124:	21 f4       	brne	.+8      	; 0x12e <__vector_13+0x76>
 126:	10 92 7d 00 	sts	0x007D, r1
 12a:	10 92 7c 00 	sts	0x007C, r1
	}
	if(UQEnd==RECEIVE_BUFF_SIZE-1)
 12e:	80 91 7e 00 	lds	r24, 0x007E
 132:	90 91 7f 00 	lds	r25, 0x007F
 136:	8f 37       	cpi	r24, 0x7F	; 127
 138:	91 05       	cpc	r25, r1
 13a:	29 f4       	brne	.+10     	; 0x146 <__vector_13+0x8e>
		UQEnd=0;
 13c:	10 92 7f 00 	sts	0x007F, r1
 140:	10 92 7e 00 	sts	0x007E, r1
 144:	09 c0       	rjmp	.+18     	; 0x158 <__vector_13+0xa0>
	else
		UQEnd++;
 146:	80 91 7e 00 	lds	r24, 0x007E
 14a:	90 91 7f 00 	lds	r25, 0x007F
 14e:	01 96       	adiw	r24, 0x01	; 1
 150:	90 93 7f 00 	sts	0x007F, r25
 154:	80 93 7e 00 	sts	0x007E, r24

	URBuff[UQEnd]=data;
 158:	e0 91 7e 00 	lds	r30, 0x007E
 15c:	f0 91 7f 00 	lds	r31, 0x007F
 160:	e0 58       	subi	r30, 0x80	; 128
 162:	ff 4f       	sbci	r31, 0xFF	; 255
 164:	40 83       	st	Z, r20
	if(UQFront==-1) UQFront=0;
 166:	80 91 7c 00 	lds	r24, 0x007C
 16a:	90 91 7d 00 	lds	r25, 0x007D
 16e:	01 96       	adiw	r24, 0x01	; 1
 170:	21 f4       	brne	.+8      	; 0x17a <__vector_13+0xc2>
 172:	10 92 7d 00 	sts	0x007D, r1
 176:	10 92 7c 00 	sts	0x007C, r1

}
 17a:	ff 91       	pop	r31
 17c:	ef 91       	pop	r30
 17e:	9f 91       	pop	r25
 180:	8f 91       	pop	r24
 182:	4f 91       	pop	r20
 184:	3f 91       	pop	r19
 186:	2f 91       	pop	r18
 188:	0f 90       	pop	r0
 18a:	0f be       	out	0x3f, r0	; 63
 18c:	0f 90       	pop	r0
 18e:	1f 90       	pop	r1
 190:	18 95       	reti

00000192 <UReadData>:

char UReadData()
{
	char data;
	if(UQFront==-1)
 192:	80 91 7c 00 	lds	r24, 0x007C
 196:	90 91 7d 00 	lds	r25, 0x007D
 19a:	01 96       	adiw	r24, 0x01	; 1
 19c:	99 f1       	breq	.+102    	; 0x204 <UReadData+0x72>
		return 0;
	data=URBuff[UQFront];
 19e:	e0 91 7c 00 	lds	r30, 0x007C
 1a2:	f0 91 7d 00 	lds	r31, 0x007D
 1a6:	e0 58       	subi	r30, 0x80	; 128
 1a8:	ff 4f       	sbci	r31, 0xFF	; 255
 1aa:	80 81       	ld	r24, Z
	if(UQFront==UQEnd)
 1ac:	40 91 7c 00 	lds	r20, 0x007C
 1b0:	50 91 7d 00 	lds	r21, 0x007D
 1b4:	20 91 7e 00 	lds	r18, 0x007E
 1b8:	30 91 7f 00 	lds	r19, 0x007F
 1bc:	42 17       	cp	r20, r18
 1be:	53 07       	cpc	r21, r19
 1c0:	59 f4       	brne	.+22     	; 0x1d8 <UReadData+0x46>
		UQFront=UQEnd=-1;	
 1c2:	2f ef       	ldi	r18, 0xFF	; 255
 1c4:	3f ef       	ldi	r19, 0xFF	; 255
 1c6:	30 93 7f 00 	sts	0x007F, r19
 1ca:	20 93 7e 00 	sts	0x007E, r18
 1ce:	30 93 7d 00 	sts	0x007D, r19
 1d2:	20 93 7c 00 	sts	0x007C, r18
 1d6:	08 95       	ret
	else
	{
		UQFront++;
 1d8:	20 91 7c 00 	lds	r18, 0x007C
 1dc:	30 91 7d 00 	lds	r19, 0x007D
 1e0:	2f 5f       	subi	r18, 0xFF	; 255
 1e2:	3f 4f       	sbci	r19, 0xFF	; 255
 1e4:	30 93 7d 00 	sts	0x007D, r19
 1e8:	20 93 7c 00 	sts	0x007C, r18
		if(UQFront==RECEIVE_BUFF_SIZE)
 1ec:	20 91 7c 00 	lds	r18, 0x007C
 1f0:	30 91 7d 00 	lds	r19, 0x007D
 1f4:	20 38       	cpi	r18, 0x80	; 128
 1f6:	31 05       	cpc	r19, r1
 1f8:	31 f4       	brne	.+12     	; 0x206 <UReadData+0x74>
		UQFront=0;
 1fa:	10 92 7d 00 	sts	0x007D, r1
 1fe:	10 92 7c 00 	sts	0x007C, r1
 202:	08 95       	ret

char UReadData()
{
	char data;
	if(UQFront==-1)
		return 0;
 204:	80 e0       	ldi	r24, 0x00	; 0
		if(UQFront==RECEIVE_BUFF_SIZE)
		UQFront=0;
	}

	return data;
}
 206:	08 95       	ret

00000208 <UWriteData>:

void UWriteData(char data)
{
	while(!(UCSRA & (1<<UDRE)));
 208:	5d 9b       	sbis	0x0b, 5	; 11
 20a:	fe cf       	rjmp	.-4      	; 0x208 <UWriteData>
	UDR=data;
 20c:	8c b9       	out	0x0c, r24	; 12
 20e:	08 95       	ret

00000210 <__vector_1>:
		_delay_ms(100);		
    }
}

ISR(INT0_vect)
{
 210:	1f 92       	push	r1
 212:	0f 92       	push	r0
 214:	0f b6       	in	r0, 0x3f	; 63
 216:	0f 92       	push	r0
 218:	11 24       	eor	r1, r1
 21a:	8f 93       	push	r24
 21c:	9f 93       	push	r25
    if (i==1)
 21e:	80 91 78 00 	lds	r24, 0x0078
 222:	90 91 79 00 	lds	r25, 0x0079
 226:	01 97       	sbiw	r24, 0x01	; 1
 228:	69 f4       	brne	.+26     	; 0x244 <__vector_1+0x34>
    {
        TCCR1B=0;
 22a:	1e bc       	out	0x2e, r1	; 46
        pulse=TCNT1;
 22c:	8c b5       	in	r24, 0x2c	; 44
 22e:	9d b5       	in	r25, 0x2d	; 45
 230:	90 93 7b 00 	sts	0x007B, r25
 234:	80 93 7a 00 	sts	0x007A, r24
        TCNT1=0;
 238:	1d bc       	out	0x2d, r1	; 45
 23a:	1c bc       	out	0x2c, r1	; 44
        i=0;
 23c:	10 92 79 00 	sts	0x0079, r1
 240:	10 92 78 00 	sts	0x0078, r1
    }
    if (i==0)
 244:	80 91 78 00 	lds	r24, 0x0078
 248:	90 91 79 00 	lds	r25, 0x0079
 24c:	89 2b       	or	r24, r25
 24e:	49 f4       	brne	.+18     	; 0x262 <__vector_1+0x52>
    {
        TCCR1B|=(1<<CS10);
 250:	8e b5       	in	r24, 0x2e	; 46
 252:	81 60       	ori	r24, 0x01	; 1
 254:	8e bd       	out	0x2e, r24	; 46
        i=1;
 256:	81 e0       	ldi	r24, 0x01	; 1
 258:	90 e0       	ldi	r25, 0x00	; 0
 25a:	90 93 79 00 	sts	0x0079, r25
 25e:	80 93 78 00 	sts	0x0078, r24
    }
}
 262:	9f 91       	pop	r25
 264:	8f 91       	pop	r24
 266:	0f 90       	pop	r0
 268:	0f be       	out	0x3f, r0	; 63
 26a:	0f 90       	pop	r0
 26c:	1f 90       	pop	r1
 26e:	18 95       	reti

00000270 <__vector_2>:

ISR(INT1_vect)
{
 270:	1f 92       	push	r1
 272:	0f 92       	push	r0
 274:	0f b6       	in	r0, 0x3f	; 63
 276:	0f 92       	push	r0
 278:	11 24       	eor	r1, r1
 27a:	8f 93       	push	r24
 27c:	9f 93       	push	r25
	if (j==1)
 27e:	80 91 74 00 	lds	r24, 0x0074
 282:	90 91 75 00 	lds	r25, 0x0075
 286:	01 97       	sbiw	r24, 0x01	; 1
 288:	69 f4       	brne	.+26     	; 0x2a4 <__vector_2+0x34>
	{
		TCCR1B=0;
 28a:	1e bc       	out	0x2e, r1	; 46
		pulse2=TCNT1;
 28c:	8c b5       	in	r24, 0x2c	; 44
 28e:	9d b5       	in	r25, 0x2d	; 45
 290:	90 93 77 00 	sts	0x0077, r25
 294:	80 93 76 00 	sts	0x0076, r24
		TCNT1=0;
 298:	1d bc       	out	0x2d, r1	; 45
 29a:	1c bc       	out	0x2c, r1	; 44
		j=0;
 29c:	10 92 75 00 	sts	0x0075, r1
 2a0:	10 92 74 00 	sts	0x0074, r1
	}
	if (j==0)
 2a4:	80 91 74 00 	lds	r24, 0x0074
 2a8:	90 91 75 00 	lds	r25, 0x0075
 2ac:	89 2b       	or	r24, r25
 2ae:	49 f4       	brne	.+18     	; 0x2c2 <__vector_2+0x52>
	{
		TCCR1B|=(1<<CS10);
 2b0:	8e b5       	in	r24, 0x2e	; 46
 2b2:	81 60       	ori	r24, 0x01	; 1
 2b4:	8e bd       	out	0x2e, r24	; 46
		j=1;
 2b6:	81 e0       	ldi	r24, 0x01	; 1
 2b8:	90 e0       	ldi	r25, 0x00	; 0
 2ba:	90 93 75 00 	sts	0x0075, r25
 2be:	80 93 74 00 	sts	0x0074, r24
	}
}
 2c2:	9f 91       	pop	r25
 2c4:	8f 91       	pop	r24
 2c6:	0f 90       	pop	r0
 2c8:	0f be       	out	0x3f, r0	; 63
 2ca:	0f 90       	pop	r0
 2cc:	1f 90       	pop	r1
 2ce:	18 95       	reti

000002d0 <send_a_command>:


void send_a_command(unsigned char command)
{
    PORTC = command;
 2d0:	85 bb       	out	0x15, r24	; 21
    PORTD &= ~ (1<<registerselection);
 2d2:	96 98       	cbi	0x12, 6	; 18
    PORTD |= 1<<enable;
 2d4:	95 9a       	sbi	0x12, 5	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2d6:	8f ec       	ldi	r24, 0xCF	; 207
 2d8:	97 e0       	ldi	r25, 0x07	; 7
 2da:	01 97       	sbiw	r24, 0x01	; 1
 2dc:	f1 f7       	brne	.-4      	; 0x2da <send_a_command+0xa>
 2de:	00 c0       	rjmp	.+0      	; 0x2e0 <send_a_command+0x10>
 2e0:	00 00       	nop
    _delay_ms(8);
    PORTD &= ~1<<enable;
 2e2:	82 b3       	in	r24, 0x12	; 18
 2e4:	80 7c       	andi	r24, 0xC0	; 192
 2e6:	82 bb       	out	0x12, r24	; 18
    PORTC = 0;
 2e8:	15 ba       	out	0x15, r1	; 21
 2ea:	08 95       	ret

000002ec <send_a_character>:
}

void send_a_character(unsigned char character)
{
    PORTC = character;
 2ec:	85 bb       	out	0x15, r24	; 21
    PORTD |= 1<<registerselection;
 2ee:	96 9a       	sbi	0x12, 6	; 18
    PORTD |= 1<<enable;
 2f0:	95 9a       	sbi	0x12, 5	; 18
 2f2:	8f ec       	ldi	r24, 0xCF	; 207
 2f4:	97 e0       	ldi	r25, 0x07	; 7
 2f6:	01 97       	sbiw	r24, 0x01	; 1
 2f8:	f1 f7       	brne	.-4      	; 0x2f6 <send_a_character+0xa>
 2fa:	00 c0       	rjmp	.+0      	; 0x2fc <send_a_character+0x10>
 2fc:	00 00       	nop
    _delay_ms(8);
    PORTD &= ~1<<enable;
 2fe:	82 b3       	in	r24, 0x12	; 18
 300:	80 7c       	andi	r24, 0xC0	; 192
 302:	82 bb       	out	0x12, r24	; 18
    PORTC = 0;
 304:	15 ba       	out	0x15, r1	; 21
 306:	08 95       	ret

00000308 <send_a_string>:
}
void send_a_string(char *string_of_characters)
{
 308:	cf 93       	push	r28
 30a:	df 93       	push	r29
 30c:	ec 01       	movw	r28, r24
    while(*string_of_characters > 0)
 30e:	88 81       	ld	r24, Y
 310:	88 23       	and	r24, r24
 312:	31 f0       	breq	.+12     	; 0x320 <send_a_string+0x18>
 314:	21 96       	adiw	r28, 0x01	; 1
    {
        send_a_character(*string_of_characters++);
 316:	0e 94 76 01 	call	0x2ec	; 0x2ec <send_a_character>
    PORTD &= ~1<<enable;
    PORTC = 0;
}
void send_a_string(char *string_of_characters)
{
    while(*string_of_characters > 0)
 31a:	89 91       	ld	r24, Y+
 31c:	81 11       	cpse	r24, r1
 31e:	fb cf       	rjmp	.-10     	; 0x316 <send_a_string+0xe>
    {
        send_a_character(*string_of_characters++);
    }
 320:	df 91       	pop	r29
 322:	cf 91       	pop	r28
 324:	08 95       	ret

00000326 <main>:
static volatile int pulse2 = 0;
static volatile int j = 0;


int main(void)
{
 326:	cf 93       	push	r28
 328:	df 93       	push	r29
 32a:	cd b7       	in	r28, 0x3d	; 61
 32c:	de b7       	in	r29, 0x3e	; 62
 32e:	62 97       	sbiw	r28, 0x12	; 18
 330:	0f b6       	in	r0, 0x3f	; 63
 332:	f8 94       	cli
 334:	de bf       	out	0x3e, r29	; 62
 336:	0f be       	out	0x3f, r0	; 63
 338:	cd bf       	out	0x3d, r28	; 61
    DDRA = 0b11111111;
 33a:	8f ef       	ldi	r24, 0xFF	; 255
 33c:	8a bb       	out	0x1a, r24	; 26
    DDRB = 0b11111011;
 33e:	9b ef       	ldi	r25, 0xFB	; 251
 340:	97 bb       	out	0x17, r25	; 23
	DDRC = 0xFF;
 342:	84 bb       	out	0x14, r24	; 20
    DDRD = 0b11110011;
 344:	83 ef       	ldi	r24, 0xF3	; 243
 346:	81 bb       	out	0x11, r24	; 17
	PORTA =0;
 348:	1b ba       	out	0x1b, r1	; 27
 34a:	83 ed       	ldi	r24, 0xD3	; 211
 34c:	90 e3       	ldi	r25, 0x30	; 48
 34e:	01 97       	sbiw	r24, 0x01	; 1
 350:	f1 f7       	brne	.-4      	; 0x34e <main+0x28>
 352:	00 c0       	rjmp	.+0      	; 0x354 <main+0x2e>
 354:	00 00       	nop
    _delay_ms(50);
	
    GICR = (1<<INT0)|(1<<INT1);
 356:	80 ec       	ldi	r24, 0xC0	; 192
 358:	8b bf       	out	0x3b, r24	; 59
    MCUCR=(1<<ISC00)|(1<<ISC10);
 35a:	85 e0       	ldi	r24, 0x05	; 5
 35c:	85 bf       	out	0x35, r24	; 53
   
    TCCR1A = 0;
 35e:	1f bc       	out	0x2f, r1	; 47
	int pattern[10];
	int sum=0;
	for(p=0;p<10;p++)
		pattern[p]= 0;
	//bluetooth part
	USARTInit(12);
 360:	8c e0       	ldi	r24, 0x0C	; 12
 362:	90 e0       	ldi	r25, 0x00	; 0
 364:	0e 94 49 00 	call	0x92	; 0x92 <USARTInit>
	

    send_a_command(0x01); //Clear Screen 0x01 = 00000001
 368:	81 e0       	ldi	r24, 0x01	; 1
 36a:	0e 94 68 01 	call	0x2d0	; 0x2d0 <send_a_command>
 36e:	e3 ed       	ldi	r30, 0xD3	; 211
 370:	f0 e3       	ldi	r31, 0x30	; 48
 372:	31 97       	sbiw	r30, 0x01	; 1
 374:	f1 f7       	brne	.-4      	; 0x372 <main+0x4c>
 376:	00 c0       	rjmp	.+0      	; 0x378 <main+0x52>
 378:	00 00       	nop
    _delay_ms(50);
    send_a_command(0x38);
 37a:	88 e3       	ldi	r24, 0x38	; 56
 37c:	0e 94 68 01 	call	0x2d0	; 0x2d0 <send_a_command>
 380:	83 ed       	ldi	r24, 0xD3	; 211
 382:	90 e3       	ldi	r25, 0x30	; 48
 384:	01 97       	sbiw	r24, 0x01	; 1
 386:	f1 f7       	brne	.-4      	; 0x384 <main+0x5e>
 388:	00 c0       	rjmp	.+0      	; 0x38a <main+0x64>
 38a:	00 00       	nop
    _delay_ms(50);
    send_a_command(0b00001111);
 38c:	8f e0       	ldi	r24, 0x0F	; 15
 38e:	0e 94 68 01 	call	0x2d0	; 0x2d0 <send_a_command>
 392:	e3 ed       	ldi	r30, 0xD3	; 211
 394:	f0 e3       	ldi	r31, 0x30	; 48
 396:	31 97       	sbiw	r30, 0x01	; 1
 398:	f1 f7       	brne	.-4      	; 0x396 <main+0x70>
 39a:	00 c0       	rjmp	.+0      	; 0x39c <main+0x76>
 39c:	00 00       	nop
    _delay_ms(50);
    
    sei();
 39e:	78 94       	sei
    MCUCR=(1<<ISC00)|(1<<ISC10);
   
    TCCR1A = 0;
    
    int16_t COUNTA = 0,COUNTB=0,prevdist=0,door2flag=0,COUNTA2=0,visitorCount=0;
	int opendura = 0,p=0,entryflag=0,opening=0,closing=0,wait=0,current=0;
 3a0:	1a 8a       	std	Y+18, r1	; 0x12
 3a2:	19 8a       	std	Y+17, r1	; 0x11
 3a4:	41 2c       	mov	r4, r1
 3a6:	51 2c       	mov	r5, r1
    GICR = (1<<INT0)|(1<<INT1);
    MCUCR=(1<<ISC00)|(1<<ISC10);
   
    TCCR1A = 0;
    
    int16_t COUNTA = 0,COUNTB=0,prevdist=0,door2flag=0,COUNTA2=0,visitorCount=0;
 3a8:	c1 2c       	mov	r12, r1
 3aa:	d1 2c       	mov	r13, r1
 3ac:	21 2c       	mov	r2, r1
 3ae:	31 2c       	mov	r3, r1
    {
		
        PORTA|=(1<<PINA1);
        _delay_us(15);
        PORTA &=~(1<<PINA1);
        COUNTA = pulse/58;
 3b0:	0f 2e       	mov	r0, r31
 3b2:	fa e3       	ldi	r31, 0x3A	; 58
 3b4:	af 2e       	mov	r10, r31
 3b6:	b1 2c       	mov	r11, r1
 3b8:	f0 2d       	mov	r31, r0
    sei();
    
    while(1)
    {
		
        PORTA|=(1<<PINA1);
 3ba:	d9 9a       	sbi	0x1b, 1	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3bc:	f5 e0       	ldi	r31, 0x05	; 5
 3be:	fa 95       	dec	r31
 3c0:	f1 f7       	brne	.-4      	; 0x3be <main+0x98>
        _delay_us(15);
        PORTA &=~(1<<PINA1);
 3c2:	d9 98       	cbi	0x1b, 1	; 27
        COUNTA = pulse/58;
 3c4:	80 91 7a 00 	lds	r24, 0x007A
 3c8:	90 91 7b 00 	lds	r25, 0x007B
 3cc:	b5 01       	movw	r22, r10
 3ce:	0e 94 a8 02 	call	0x550	; 0x550 <__divmodhi4>
 3d2:	8b 01       	movw	r16, r22
 3d4:	4b 01       	movw	r8, r22
		
		PORTA|=(1<<PINA2);
 3d6:	da 9a       	sbi	0x1b, 2	; 27
 3d8:	85 e0       	ldi	r24, 0x05	; 5
 3da:	8a 95       	dec	r24
 3dc:	f1 f7       	brne	.-4      	; 0x3da <main+0xb4>
		_delay_us(15);
		PORTA &=~(1<<PINA2);
 3de:	da 98       	cbi	0x1b, 2	; 27
		COUNTB = pulse2/58;
 3e0:	80 91 76 00 	lds	r24, 0x0076
 3e4:	90 91 77 00 	lds	r25, 0x0077
 3e8:	b5 01       	movw	r22, r10
 3ea:	0e 94 a8 02 	call	0x550	; 0x550 <__divmodhi4>
 3ee:	7b 01       	movw	r14, r22
 3f0:	3b 01       	movw	r6, r22
		send_a_string ("vis= ");
 3f2:	80 e6       	ldi	r24, 0x60	; 96
 3f4:	90 e0       	ldi	r25, 0x00	; 0
 3f6:	0e 94 84 01 	call	0x308	; 0x308 <send_a_string>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 3fa:	4a e0       	ldi	r20, 0x0A	; 10
 3fc:	be 01       	movw	r22, r28
 3fe:	6f 5f       	subi	r22, 0xFF	; 255
 400:	7f 4f       	sbci	r23, 0xFF	; 255
 402:	c6 01       	movw	r24, r12
 404:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <__itoa_ncheck>
		//itoa(visitorCount,SHOWA,10);
		itoa(visitorCount,SHOWA,10);
		send_a_string(SHOWA);
 408:	ce 01       	movw	r24, r28
 40a:	01 96       	adiw	r24, 0x01	; 1
 40c:	0e 94 84 01 	call	0x308	; 0x308 <send_a_string>
		send_a_string("   ");
 410:	80 e7       	ldi	r24, 0x70	; 112
 412:	90 e0       	ldi	r25, 0x00	; 0
 414:	0e 94 84 01 	call	0x308	; 0x308 <send_a_string>
		send_a_command(0xc0);
 418:	80 ec       	ldi	r24, 0xC0	; 192
 41a:	0e 94 68 01 	call	0x2d0	; 0x2d0 <send_a_command>
		send_a_string ("DISTA=");
 41e:	86 e6       	ldi	r24, 0x66	; 102
 420:	90 e0       	ldi	r25, 0x00	; 0
 422:	0e 94 84 01 	call	0x308	; 0x308 <send_a_string>
 426:	4a e0       	ldi	r20, 0x0A	; 10
 428:	be 01       	movw	r22, r28
 42a:	6f 5f       	subi	r22, 0xFF	; 255
 42c:	7f 4f       	sbci	r23, 0xFF	; 255
 42e:	c8 01       	movw	r24, r16
 430:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <__itoa_ncheck>
		itoa(COUNTA,SHOWA,10);
		send_a_string(SHOWA);
 434:	ce 01       	movw	r24, r28
 436:	01 96       	adiw	r24, 0x01	; 1
 438:	0e 94 84 01 	call	0x308	; 0x308 <send_a_string>
		send_a_string ("cm    ");
 43c:	8d e6       	ldi	r24, 0x6D	; 109
 43e:	90 e0       	ldi	r25, 0x00	; 0
 440:	0e 94 84 01 	call	0x308	; 0x308 <send_a_string>
		
		send_a_command(0x80 + 0);	
 444:	80 e8       	ldi	r24, 0x80	; 128
 446:	0e 94 68 01 	call	0x2d0	; 0x2d0 <send_a_command>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 44a:	e3 ec       	ldi	r30, 0xC3	; 195
 44c:	f9 e0       	ldi	r31, 0x09	; 9
 44e:	31 97       	sbiw	r30, 0x01	; 1
 450:	f1 f7       	brne	.-4      	; 0x44e <main+0x128>
 452:	00 c0       	rjmp	.+0      	; 0x454 <main+0x12e>
 454:	00 00       	nop
        _delay_ms(10);
		
	
		if(COUNTA>=2&&COUNTA<=15&&opening==0)
 456:	02 50       	subi	r16, 0x02	; 2
 458:	11 09       	sbc	r17, r1
 45a:	0e 30       	cpi	r16, 0x0E	; 14
 45c:	11 05       	cpc	r17, r1
 45e:	d0 f4       	brcc	.+52     	; 0x494 <main+0x16e>
 460:	89 89       	ldd	r24, Y+17	; 0x11
 462:	9a 89       	ldd	r25, Y+18	; 0x12
 464:	89 2b       	or	r24, r25
 466:	b1 f4       	brne	.+44     	; 0x494 <main+0x16e>
 468:	88 e0       	ldi	r24, 0x08	; 8
 46a:	90 e0       	ldi	r25, 0x00	; 0
				for(p=0;p<10;p++)
				pattern[p]= 0;
			}*/
			
			for(p=0;p<8;p++){
				PORTA |=0b00000001;
 46c:	d8 9a       	sbi	0x1b, 0	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 46e:	e3 ef       	ldi	r30, 0xF3	; 243
 470:	f1 e0       	ldi	r31, 0x01	; 1
 472:	31 97       	sbiw	r30, 0x01	; 1
 474:	f1 f7       	brne	.-4      	; 0x472 <main+0x14c>
 476:	00 c0       	rjmp	.+0      	; 0x478 <main+0x152>
 478:	00 00       	nop
				_delay_us(2000);
				PORTA &= 0b11111110;
 47a:	d8 98       	cbi	0x1b, 0	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 47c:	e7 e8       	ldi	r30, 0x87	; 135
 47e:	f3 e1       	ldi	r31, 0x13	; 19
 480:	31 97       	sbiw	r30, 0x01	; 1
 482:	f1 f7       	brne	.-4      	; 0x480 <main+0x15a>
 484:	00 c0       	rjmp	.+0      	; 0x486 <main+0x160>
 486:	00 00       	nop
 488:	01 97       	sbiw	r24, 0x01	; 1
				sum=0;
				for(p=0;p<10;p++)
				pattern[p]= 0;
			}*/
			
			for(p=0;p<8;p++){
 48a:	00 97       	sbiw	r24, 0x00	; 0
 48c:	79 f7       	brne	.-34     	; 0x46c <main+0x146>
				PORTA &= 0b11111110;
				_delay_ms(20);
			
			}	
			//_delay_ms(2000);
			opening=1;
 48e:	f1 e0       	ldi	r31, 0x01	; 1
 490:	f9 8b       	std	Y+17, r31	; 0x11
 492:	1a 8a       	std	Y+18, r1	; 0x12
		}
		
		if(COUNTA>15)
 494:	80 e1       	ldi	r24, 0x10	; 16
 496:	88 16       	cp	r8, r24
 498:	91 04       	cpc	r9, r1
 49a:	04 f1       	brlt	.+64     	; 0x4dc <main+0x1b6>
			opendura++;
 49c:	9f ef       	ldi	r25, 0xFF	; 255
 49e:	49 1a       	sub	r4, r25
 4a0:	59 0a       	sbc	r5, r25
		if(COUNTA>15&&opendura>8&&opening==1)
 4a2:	e9 e0       	ldi	r30, 0x09	; 9
 4a4:	4e 16       	cp	r4, r30
 4a6:	51 04       	cpc	r5, r1
 4a8:	cc f0       	brlt	.+50     	; 0x4dc <main+0x1b6>
 4aa:	89 89       	ldd	r24, Y+17	; 0x11
 4ac:	9a 89       	ldd	r25, Y+18	; 0x12
 4ae:	01 97       	sbiw	r24, 0x01	; 1
 4b0:	09 f0       	breq	.+2      	; 0x4b4 <main+0x18e>
 4b2:	46 c0       	rjmp	.+140    	; 0x540 <main+0x21a>
 4b4:	88 e0       	ldi	r24, 0x08	; 8
 4b6:	90 e0       	ldi	r25, 0x00	; 0
		{//gate closing
			opening=0;
			opendura=0;
			//_delay_ms(3000);
			for(p=0;p<8;p++){
				PORTA |=0b00000001;
 4b8:	d8 9a       	sbi	0x1b, 0	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4ba:	e9 ef       	ldi	r30, 0xF9	; 249
 4bc:	f0 e0       	ldi	r31, 0x00	; 0
 4be:	31 97       	sbiw	r30, 0x01	; 1
 4c0:	f1 f7       	brne	.-4      	; 0x4be <main+0x198>
 4c2:	00 c0       	rjmp	.+0      	; 0x4c4 <main+0x19e>
 4c4:	00 00       	nop
				_delay_us(1000);
				PORTA &= 0b11111110;
 4c6:	d8 98       	cbi	0x1b, 0	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4c8:	e7 e8       	ldi	r30, 0x87	; 135
 4ca:	f3 e1       	ldi	r31, 0x13	; 19
 4cc:	31 97       	sbiw	r30, 0x01	; 1
 4ce:	f1 f7       	brne	.-4      	; 0x4cc <main+0x1a6>
 4d0:	00 c0       	rjmp	.+0      	; 0x4d2 <main+0x1ac>
 4d2:	00 00       	nop
 4d4:	01 97       	sbiw	r24, 0x01	; 1
		if(COUNTA>15&&opendura>8&&opening==1)
		{//gate closing
			opening=0;
			opendura=0;
			//_delay_ms(3000);
			for(p=0;p<8;p++){
 4d6:	00 97       	sbiw	r24, 0x00	; 0
 4d8:	79 f7       	brne	.-34     	; 0x4b8 <main+0x192>
 4da:	2e c0       	rjmp	.+92     	; 0x538 <main+0x212>
			}
		}
		
		//updating pattern
	
		if(COUNTB>2&&COUNTB<15&&opening==1){
 4dc:	f3 e0       	ldi	r31, 0x03	; 3
 4de:	ef 1a       	sub	r14, r31
 4e0:	f1 08       	sbc	r15, r1
 4e2:	8c e0       	ldi	r24, 0x0C	; 12
 4e4:	e8 16       	cp	r14, r24
 4e6:	f1 04       	cpc	r15, r1
 4e8:	98 f4       	brcc	.+38     	; 0x510 <main+0x1ea>
			pattern[0]= COUNTB;
			sum=sum+COUNTB;
		}
		
		//increasing visitorcount
		if(COUNTB>2&&COUNTB<15&&door2flag==0){	
 4ea:	21 14       	cp	r2, r1
 4ec:	31 04       	cpc	r3, r1
 4ee:	81 f4       	brne	.+32     	; 0x510 <main+0x1ea>
			if(visitorCount>0){
 4f0:	1c 14       	cp	r1, r12
 4f2:	1d 04       	cpc	r1, r13
 4f4:	54 f4       	brge	.+20     	; 0x50a <main+0x1e4>
				visitorCount--;
 4f6:	91 e0       	ldi	r25, 0x01	; 1
 4f8:	c9 1a       	sub	r12, r25
 4fa:	d1 08       	sbc	r13, r1
				UWriteData('1');
 4fc:	81 e3       	ldi	r24, 0x31	; 49
 4fe:	0e 94 04 01 	call	0x208	; 0x208 <UWriteData>
			}
			door2flag=1;
 502:	22 24       	eor	r2, r2
 504:	23 94       	inc	r2
 506:	31 2c       	mov	r3, r1
 508:	03 c0       	rjmp	.+6      	; 0x510 <main+0x1ea>
 50a:	22 24       	eor	r2, r2
 50c:	23 94       	inc	r2
 50e:	31 2c       	mov	r3, r1
			
		}
		
		if(COUNTB>15){
 510:	e0 e1       	ldi	r30, 0x10	; 16
 512:	6e 16       	cp	r6, r30
 514:	71 04       	cpc	r7, r1
 516:	14 f0       	brlt	.+4      	; 0x51c <main+0x1f6>
			door2flag=0;
 518:	21 2c       	mov	r2, r1
 51a:	31 2c       	mov	r3, r1
		}
		//receive data
		char readData=UReadData();
 51c:	0e 94 c9 00 	call	0x192	; 0x192 <UReadData>
		if(readData)
 520:	88 23       	and	r24, r24
 522:	19 f0       	breq	.+6      	; 0x52a <main+0x204>
			visitorCount++;
 524:	ff ef       	ldi	r31, 0xFF	; 255
 526:	cf 1a       	sub	r12, r31
 528:	df 0a       	sbc	r13, r31
 52a:	87 ea       	ldi	r24, 0xA7	; 167
 52c:	91 e6       	ldi	r25, 0x61	; 97
 52e:	01 97       	sbiw	r24, 0x01	; 1
 530:	f1 f7       	brne	.-4      	; 0x52e <main+0x208>
 532:	00 c0       	rjmp	.+0      	; 0x534 <main+0x20e>
 534:	00 00       	nop
 536:	41 cf       	rjmp	.-382    	; 0x3ba <main+0x94>
		
		if(COUNTA>15)
			opendura++;
		if(COUNTA>15&&opendura>8&&opening==1)
		{//gate closing
			opening=0;
 538:	19 8a       	std	Y+17, r1	; 0x11
 53a:	1a 8a       	std	Y+18, r1	; 0x12
			opendura=0;
 53c:	41 2c       	mov	r4, r1
 53e:	51 2c       	mov	r5, r1
			}
		}
		
		//updating pattern
	
		if(COUNTB>2&&COUNTB<15&&opening==1){
 540:	93 e0       	ldi	r25, 0x03	; 3
 542:	e9 1a       	sub	r14, r25
 544:	f1 08       	sbc	r15, r1
			pattern[0]= COUNTB;
			sum=sum+COUNTB;
		}
		
		//increasing visitorcount
		if(COUNTB>2&&COUNTB<15&&door2flag==0){	
 546:	ec e0       	ldi	r30, 0x0C	; 12
 548:	ee 16       	cp	r14, r30
 54a:	f1 04       	cpc	r15, r1
 54c:	70 f2       	brcs	.-100    	; 0x4ea <main+0x1c4>
 54e:	e0 cf       	rjmp	.-64     	; 0x510 <main+0x1ea>

00000550 <__divmodhi4>:
 550:	97 fb       	bst	r25, 7
 552:	07 2e       	mov	r0, r23
 554:	16 f4       	brtc	.+4      	; 0x55a <__divmodhi4+0xa>
 556:	00 94       	com	r0
 558:	07 d0       	rcall	.+14     	; 0x568 <__divmodhi4_neg1>
 55a:	77 fd       	sbrc	r23, 7
 55c:	09 d0       	rcall	.+18     	; 0x570 <__divmodhi4_neg2>
 55e:	0e 94 bc 02 	call	0x578	; 0x578 <__udivmodhi4>
 562:	07 fc       	sbrc	r0, 7
 564:	05 d0       	rcall	.+10     	; 0x570 <__divmodhi4_neg2>
 566:	3e f4       	brtc	.+14     	; 0x576 <__divmodhi4_exit>

00000568 <__divmodhi4_neg1>:
 568:	90 95       	com	r25
 56a:	81 95       	neg	r24
 56c:	9f 4f       	sbci	r25, 0xFF	; 255
 56e:	08 95       	ret

00000570 <__divmodhi4_neg2>:
 570:	70 95       	com	r23
 572:	61 95       	neg	r22
 574:	7f 4f       	sbci	r23, 0xFF	; 255

00000576 <__divmodhi4_exit>:
 576:	08 95       	ret

00000578 <__udivmodhi4>:
 578:	aa 1b       	sub	r26, r26
 57a:	bb 1b       	sub	r27, r27
 57c:	51 e1       	ldi	r21, 0x11	; 17
 57e:	07 c0       	rjmp	.+14     	; 0x58e <__udivmodhi4_ep>

00000580 <__udivmodhi4_loop>:
 580:	aa 1f       	adc	r26, r26
 582:	bb 1f       	adc	r27, r27
 584:	a6 17       	cp	r26, r22
 586:	b7 07       	cpc	r27, r23
 588:	10 f0       	brcs	.+4      	; 0x58e <__udivmodhi4_ep>
 58a:	a6 1b       	sub	r26, r22
 58c:	b7 0b       	sbc	r27, r23

0000058e <__udivmodhi4_ep>:
 58e:	88 1f       	adc	r24, r24
 590:	99 1f       	adc	r25, r25
 592:	5a 95       	dec	r21
 594:	a9 f7       	brne	.-22     	; 0x580 <__udivmodhi4_loop>
 596:	80 95       	com	r24
 598:	90 95       	com	r25
 59a:	bc 01       	movw	r22, r24
 59c:	cd 01       	movw	r24, r26
 59e:	08 95       	ret

000005a0 <__itoa_ncheck>:
 5a0:	bb 27       	eor	r27, r27
 5a2:	4a 30       	cpi	r20, 0x0A	; 10
 5a4:	31 f4       	brne	.+12     	; 0x5b2 <__itoa_ncheck+0x12>
 5a6:	99 23       	and	r25, r25
 5a8:	22 f4       	brpl	.+8      	; 0x5b2 <__itoa_ncheck+0x12>
 5aa:	bd e2       	ldi	r27, 0x2D	; 45
 5ac:	90 95       	com	r25
 5ae:	81 95       	neg	r24
 5b0:	9f 4f       	sbci	r25, 0xFF	; 255
 5b2:	0c 94 dc 02 	jmp	0x5b8	; 0x5b8 <__utoa_common>

000005b6 <__utoa_ncheck>:
 5b6:	bb 27       	eor	r27, r27

000005b8 <__utoa_common>:
 5b8:	fb 01       	movw	r30, r22
 5ba:	55 27       	eor	r21, r21
 5bc:	aa 27       	eor	r26, r26
 5be:	88 0f       	add	r24, r24
 5c0:	99 1f       	adc	r25, r25
 5c2:	aa 1f       	adc	r26, r26
 5c4:	a4 17       	cp	r26, r20
 5c6:	10 f0       	brcs	.+4      	; 0x5cc <__utoa_common+0x14>
 5c8:	a4 1b       	sub	r26, r20
 5ca:	83 95       	inc	r24
 5cc:	50 51       	subi	r21, 0x10	; 16
 5ce:	b9 f7       	brne	.-18     	; 0x5be <__utoa_common+0x6>
 5d0:	a0 5d       	subi	r26, 0xD0	; 208
 5d2:	aa 33       	cpi	r26, 0x3A	; 58
 5d4:	08 f0       	brcs	.+2      	; 0x5d8 <__utoa_common+0x20>
 5d6:	a9 5d       	subi	r26, 0xD9	; 217
 5d8:	a1 93       	st	Z+, r26
 5da:	00 97       	sbiw	r24, 0x00	; 0
 5dc:	79 f7       	brne	.-34     	; 0x5bc <__utoa_common+0x4>
 5de:	b1 11       	cpse	r27, r1
 5e0:	b1 93       	st	Z+, r27
 5e2:	11 92       	st	Z+, r1
 5e4:	cb 01       	movw	r24, r22
 5e6:	0c 94 f5 02 	jmp	0x5ea	; 0x5ea <strrev>

000005ea <strrev>:
 5ea:	dc 01       	movw	r26, r24
 5ec:	fc 01       	movw	r30, r24
 5ee:	67 2f       	mov	r22, r23
 5f0:	71 91       	ld	r23, Z+
 5f2:	77 23       	and	r23, r23
 5f4:	e1 f7       	brne	.-8      	; 0x5ee <strrev+0x4>
 5f6:	32 97       	sbiw	r30, 0x02	; 2
 5f8:	04 c0       	rjmp	.+8      	; 0x602 <strrev+0x18>
 5fa:	7c 91       	ld	r23, X
 5fc:	6d 93       	st	X+, r22
 5fe:	70 83       	st	Z, r23
 600:	62 91       	ld	r22, -Z
 602:	ae 17       	cp	r26, r30
 604:	bf 07       	cpc	r27, r31
 606:	c8 f3       	brcs	.-14     	; 0x5fa <strrev+0x10>
 608:	08 95       	ret

0000060a <_exit>:
 60a:	f8 94       	cli

0000060c <__stop_program>:
 60c:	ff cf       	rjmp	.-2      	; 0x60c <__stop_program>
