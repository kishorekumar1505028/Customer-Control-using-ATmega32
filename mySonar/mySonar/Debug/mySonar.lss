
mySonar.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000005fc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000014  00800060  000005fc  00000690  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000008c  00800074  00800074  000006a4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006a4  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000088  00000000  00000000  000006d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000aa3  00000000  00000000  0000075c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000002f3  00000000  00000000  000011ff  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003ba  00000000  00000000  000014f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000188  00000000  00000000  000018ac  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000321  00000000  00000000  00001a34  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000714  00000000  00000000  00001d55  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000078  00000000  00000000  00002469  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 08 01 	jmp	0x210	; 0x210 <__vector_1>
   8:	0c 94 38 01 	jmp	0x270	; 0x270 <__vector_2>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__vector_13>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec ef       	ldi	r30, 0xFC	; 252
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 37       	cpi	r26, 0x74	; 116
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	21 e0       	ldi	r18, 0x01	; 1
  78:	a4 e7       	ldi	r26, 0x74	; 116
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 30       	cpi	r26, 0x00	; 0
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 93 01 	call	0x326	; 0x326 <main>
  8a:	0c 94 fc 02 	jmp	0x5f8	; 0x5f8 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <USARTInit>:
#include <inttypes.h>


void USARTInit(uint16_t ubrrvalue)
{	
	UQFront=UQEnd=-1;
  92:	2f ef       	ldi	r18, 0xFF	; 255
  94:	3f ef       	ldi	r19, 0xFF	; 255
  96:	30 93 7f 00 	sts	0x007F, r19
  9a:	20 93 7e 00 	sts	0x007E, r18
  9e:	30 93 7d 00 	sts	0x007D, r19
  a2:	20 93 7c 00 	sts	0x007C, r18
	
	UBRRH=(unsigned char)(ubrrvalue>>8);
  a6:	90 bd       	out	0x20, r25	; 32
	UBRRL=(unsigned char)ubrrvalue;
  a8:	89 b9       	out	0x09, r24	; 9
	UCSRA = 0 ;
  aa:	1b b8       	out	0x0b, r1	; 11
	UCSRC=(1<<URSEL)|(3<<UCSZ0);
  ac:	86 e8       	ldi	r24, 0x86	; 134
  ae:	80 bd       	out	0x20, r24	; 32
	UCSRB=(1<<RXCIE)|(1<<RXEN)|(1<<TXEN);
  b0:	88 e9       	ldi	r24, 0x98	; 152
  b2:	8a b9       	out	0x0a, r24	; 10
	
	sei();
  b4:	78 94       	sei
  b6:	08 95       	ret

000000b8 <__vector_13>:

}

ISR(USART_RXC_vect)
{
  b8:	1f 92       	push	r1
  ba:	0f 92       	push	r0
  bc:	0f b6       	in	r0, 0x3f	; 63
  be:	0f 92       	push	r0
  c0:	11 24       	eor	r1, r1
  c2:	2f 93       	push	r18
  c4:	3f 93       	push	r19
  c6:	4f 93       	push	r20
  c8:	8f 93       	push	r24
  ca:	9f 93       	push	r25
  cc:	ef 93       	push	r30
  ce:	ff 93       	push	r31
	char data=UDR;
  d0:	4c b1       	in	r20, 0x0c	; 12
	if(((UQEnd==RECEIVE_BUFF_SIZE-1) && UQFront==0) || ((UQEnd+1)==UQFront))
  d2:	80 91 7e 00 	lds	r24, 0x007E
  d6:	90 91 7f 00 	lds	r25, 0x007F
  da:	8f 37       	cpi	r24, 0x7F	; 127
  dc:	91 05       	cpc	r25, r1
  de:	31 f4       	brne	.+12     	; 0xec <__vector_13+0x34>
  e0:	80 91 7c 00 	lds	r24, 0x007C
  e4:	90 91 7d 00 	lds	r25, 0x007D
  e8:	89 2b       	or	r24, r25
  ea:	69 f0       	breq	.+26     	; 0x106 <__vector_13+0x4e>
  ec:	20 91 7e 00 	lds	r18, 0x007E
  f0:	30 91 7f 00 	lds	r19, 0x007F
  f4:	80 91 7c 00 	lds	r24, 0x007C
  f8:	90 91 7d 00 	lds	r25, 0x007D
  fc:	2f 5f       	subi	r18, 0xFF	; 255
  fe:	3f 4f       	sbci	r19, 0xFF	; 255
 100:	28 17       	cp	r18, r24
 102:	39 07       	cpc	r19, r25
 104:	a1 f4       	brne	.+40     	; 0x12e <__vector_13+0x76>
	{
		UQFront++;
 106:	80 91 7c 00 	lds	r24, 0x007C
 10a:	90 91 7d 00 	lds	r25, 0x007D
 10e:	01 96       	adiw	r24, 0x01	; 1
 110:	90 93 7d 00 	sts	0x007D, r25
 114:	80 93 7c 00 	sts	0x007C, r24
		if(UQFront==RECEIVE_BUFF_SIZE) UQFront=0;
 118:	80 91 7c 00 	lds	r24, 0x007C
 11c:	90 91 7d 00 	lds	r25, 0x007D
 120:	80 38       	cpi	r24, 0x80	; 128
 122:	91 05       	cpc	r25, r1
 124:	21 f4       	brne	.+8      	; 0x12e <__vector_13+0x76>
 126:	10 92 7d 00 	sts	0x007D, r1
 12a:	10 92 7c 00 	sts	0x007C, r1
	}
	if(UQEnd==RECEIVE_BUFF_SIZE-1)
 12e:	80 91 7e 00 	lds	r24, 0x007E
 132:	90 91 7f 00 	lds	r25, 0x007F
 136:	8f 37       	cpi	r24, 0x7F	; 127
 138:	91 05       	cpc	r25, r1
 13a:	29 f4       	brne	.+10     	; 0x146 <__vector_13+0x8e>
		UQEnd=0;
 13c:	10 92 7f 00 	sts	0x007F, r1
 140:	10 92 7e 00 	sts	0x007E, r1
 144:	09 c0       	rjmp	.+18     	; 0x158 <__vector_13+0xa0>
	else
		UQEnd++;
 146:	80 91 7e 00 	lds	r24, 0x007E
 14a:	90 91 7f 00 	lds	r25, 0x007F
 14e:	01 96       	adiw	r24, 0x01	; 1
 150:	90 93 7f 00 	sts	0x007F, r25
 154:	80 93 7e 00 	sts	0x007E, r24

	URBuff[UQEnd]=data;
 158:	e0 91 7e 00 	lds	r30, 0x007E
 15c:	f0 91 7f 00 	lds	r31, 0x007F
 160:	e0 58       	subi	r30, 0x80	; 128
 162:	ff 4f       	sbci	r31, 0xFF	; 255
 164:	40 83       	st	Z, r20
	if(UQFront==-1) UQFront=0;
 166:	80 91 7c 00 	lds	r24, 0x007C
 16a:	90 91 7d 00 	lds	r25, 0x007D
 16e:	01 96       	adiw	r24, 0x01	; 1
 170:	21 f4       	brne	.+8      	; 0x17a <__vector_13+0xc2>
 172:	10 92 7d 00 	sts	0x007D, r1
 176:	10 92 7c 00 	sts	0x007C, r1

}
 17a:	ff 91       	pop	r31
 17c:	ef 91       	pop	r30
 17e:	9f 91       	pop	r25
 180:	8f 91       	pop	r24
 182:	4f 91       	pop	r20
 184:	3f 91       	pop	r19
 186:	2f 91       	pop	r18
 188:	0f 90       	pop	r0
 18a:	0f be       	out	0x3f, r0	; 63
 18c:	0f 90       	pop	r0
 18e:	1f 90       	pop	r1
 190:	18 95       	reti

00000192 <UReadData>:

char UReadData()
{
	char data;
	if(UQFront==-1)
 192:	80 91 7c 00 	lds	r24, 0x007C
 196:	90 91 7d 00 	lds	r25, 0x007D
 19a:	01 96       	adiw	r24, 0x01	; 1
 19c:	99 f1       	breq	.+102    	; 0x204 <UReadData+0x72>
		return 0;
	data=URBuff[UQFront];
 19e:	e0 91 7c 00 	lds	r30, 0x007C
 1a2:	f0 91 7d 00 	lds	r31, 0x007D
 1a6:	e0 58       	subi	r30, 0x80	; 128
 1a8:	ff 4f       	sbci	r31, 0xFF	; 255
 1aa:	80 81       	ld	r24, Z
	if(UQFront==UQEnd)
 1ac:	40 91 7c 00 	lds	r20, 0x007C
 1b0:	50 91 7d 00 	lds	r21, 0x007D
 1b4:	20 91 7e 00 	lds	r18, 0x007E
 1b8:	30 91 7f 00 	lds	r19, 0x007F
 1bc:	42 17       	cp	r20, r18
 1be:	53 07       	cpc	r21, r19
 1c0:	59 f4       	brne	.+22     	; 0x1d8 <UReadData+0x46>
		UQFront=UQEnd=-1;	
 1c2:	2f ef       	ldi	r18, 0xFF	; 255
 1c4:	3f ef       	ldi	r19, 0xFF	; 255
 1c6:	30 93 7f 00 	sts	0x007F, r19
 1ca:	20 93 7e 00 	sts	0x007E, r18
 1ce:	30 93 7d 00 	sts	0x007D, r19
 1d2:	20 93 7c 00 	sts	0x007C, r18
 1d6:	08 95       	ret
	else
	{
		UQFront++;
 1d8:	20 91 7c 00 	lds	r18, 0x007C
 1dc:	30 91 7d 00 	lds	r19, 0x007D
 1e0:	2f 5f       	subi	r18, 0xFF	; 255
 1e2:	3f 4f       	sbci	r19, 0xFF	; 255
 1e4:	30 93 7d 00 	sts	0x007D, r19
 1e8:	20 93 7c 00 	sts	0x007C, r18
		if(UQFront==RECEIVE_BUFF_SIZE)
 1ec:	20 91 7c 00 	lds	r18, 0x007C
 1f0:	30 91 7d 00 	lds	r19, 0x007D
 1f4:	20 38       	cpi	r18, 0x80	; 128
 1f6:	31 05       	cpc	r19, r1
 1f8:	31 f4       	brne	.+12     	; 0x206 <UReadData+0x74>
		UQFront=0;
 1fa:	10 92 7d 00 	sts	0x007D, r1
 1fe:	10 92 7c 00 	sts	0x007C, r1
 202:	08 95       	ret

char UReadData()
{
	char data;
	if(UQFront==-1)
		return 0;
 204:	80 e0       	ldi	r24, 0x00	; 0
		if(UQFront==RECEIVE_BUFF_SIZE)
		UQFront=0;
	}

	return data;
}
 206:	08 95       	ret

00000208 <UWriteData>:

void UWriteData(char data)
{
	while(!(UCSRA & (1<<UDRE)));
 208:	5d 9b       	sbis	0x0b, 5	; 11
 20a:	fe cf       	rjmp	.-4      	; 0x208 <UWriteData>
	UDR=data;
 20c:	8c b9       	out	0x0c, r24	; 12
 20e:	08 95       	ret

00000210 <__vector_1>:
		_delay_ms(100);		
    }
}

ISR(INT0_vect)
{
 210:	1f 92       	push	r1
 212:	0f 92       	push	r0
 214:	0f b6       	in	r0, 0x3f	; 63
 216:	0f 92       	push	r0
 218:	11 24       	eor	r1, r1
 21a:	8f 93       	push	r24
 21c:	9f 93       	push	r25
    if (i==1)
 21e:	80 91 78 00 	lds	r24, 0x0078
 222:	90 91 79 00 	lds	r25, 0x0079
 226:	01 97       	sbiw	r24, 0x01	; 1
 228:	69 f4       	brne	.+26     	; 0x244 <__vector_1+0x34>
    {
        TCCR1B=0;
 22a:	1e bc       	out	0x2e, r1	; 46
        pulse=TCNT1;
 22c:	8c b5       	in	r24, 0x2c	; 44
 22e:	9d b5       	in	r25, 0x2d	; 45
 230:	90 93 7b 00 	sts	0x007B, r25
 234:	80 93 7a 00 	sts	0x007A, r24
        TCNT1=0;
 238:	1d bc       	out	0x2d, r1	; 45
 23a:	1c bc       	out	0x2c, r1	; 44
        i=0;
 23c:	10 92 79 00 	sts	0x0079, r1
 240:	10 92 78 00 	sts	0x0078, r1
    }
    if (i==0)
 244:	80 91 78 00 	lds	r24, 0x0078
 248:	90 91 79 00 	lds	r25, 0x0079
 24c:	89 2b       	or	r24, r25
 24e:	49 f4       	brne	.+18     	; 0x262 <__vector_1+0x52>
    {
        TCCR1B|=(1<<CS10);
 250:	8e b5       	in	r24, 0x2e	; 46
 252:	81 60       	ori	r24, 0x01	; 1
 254:	8e bd       	out	0x2e, r24	; 46
        i=1;
 256:	81 e0       	ldi	r24, 0x01	; 1
 258:	90 e0       	ldi	r25, 0x00	; 0
 25a:	90 93 79 00 	sts	0x0079, r25
 25e:	80 93 78 00 	sts	0x0078, r24
    }
}
 262:	9f 91       	pop	r25
 264:	8f 91       	pop	r24
 266:	0f 90       	pop	r0
 268:	0f be       	out	0x3f, r0	; 63
 26a:	0f 90       	pop	r0
 26c:	1f 90       	pop	r1
 26e:	18 95       	reti

00000270 <__vector_2>:

ISR(INT1_vect)
{
 270:	1f 92       	push	r1
 272:	0f 92       	push	r0
 274:	0f b6       	in	r0, 0x3f	; 63
 276:	0f 92       	push	r0
 278:	11 24       	eor	r1, r1
 27a:	8f 93       	push	r24
 27c:	9f 93       	push	r25
	if (j==1)
 27e:	80 91 74 00 	lds	r24, 0x0074
 282:	90 91 75 00 	lds	r25, 0x0075
 286:	01 97       	sbiw	r24, 0x01	; 1
 288:	69 f4       	brne	.+26     	; 0x2a4 <__vector_2+0x34>
	{
		TCCR1B=0;
 28a:	1e bc       	out	0x2e, r1	; 46
		pulse2=TCNT1;
 28c:	8c b5       	in	r24, 0x2c	; 44
 28e:	9d b5       	in	r25, 0x2d	; 45
 290:	90 93 77 00 	sts	0x0077, r25
 294:	80 93 76 00 	sts	0x0076, r24
		TCNT1=0;
 298:	1d bc       	out	0x2d, r1	; 45
 29a:	1c bc       	out	0x2c, r1	; 44
		j=0;
 29c:	10 92 75 00 	sts	0x0075, r1
 2a0:	10 92 74 00 	sts	0x0074, r1
	}
	if (j==0)
 2a4:	80 91 74 00 	lds	r24, 0x0074
 2a8:	90 91 75 00 	lds	r25, 0x0075
 2ac:	89 2b       	or	r24, r25
 2ae:	49 f4       	brne	.+18     	; 0x2c2 <__vector_2+0x52>
	{
		TCCR1B|=(1<<CS10);
 2b0:	8e b5       	in	r24, 0x2e	; 46
 2b2:	81 60       	ori	r24, 0x01	; 1
 2b4:	8e bd       	out	0x2e, r24	; 46
		j=1;
 2b6:	81 e0       	ldi	r24, 0x01	; 1
 2b8:	90 e0       	ldi	r25, 0x00	; 0
 2ba:	90 93 75 00 	sts	0x0075, r25
 2be:	80 93 74 00 	sts	0x0074, r24
	}
}
 2c2:	9f 91       	pop	r25
 2c4:	8f 91       	pop	r24
 2c6:	0f 90       	pop	r0
 2c8:	0f be       	out	0x3f, r0	; 63
 2ca:	0f 90       	pop	r0
 2cc:	1f 90       	pop	r1
 2ce:	18 95       	reti

000002d0 <send_a_command>:

void send_a_command(unsigned char command)
{
    PORTB = command;
 2d0:	88 bb       	out	0x18, r24	; 24
    PORTD &= ~ (1<<registerselection);
 2d2:	96 98       	cbi	0x12, 6	; 18
    PORTD |= 1<<enable;
 2d4:	95 9a       	sbi	0x12, 5	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2d6:	8f ec       	ldi	r24, 0xCF	; 207
 2d8:	97 e0       	ldi	r25, 0x07	; 7
 2da:	01 97       	sbiw	r24, 0x01	; 1
 2dc:	f1 f7       	brne	.-4      	; 0x2da <send_a_command+0xa>
 2de:	00 c0       	rjmp	.+0      	; 0x2e0 <send_a_command+0x10>
 2e0:	00 00       	nop
    _delay_ms(8);
    PORTD &= ~1<<enable;
 2e2:	82 b3       	in	r24, 0x12	; 18
 2e4:	80 7c       	andi	r24, 0xC0	; 192
 2e6:	82 bb       	out	0x12, r24	; 18
    PORTB = 0;
 2e8:	18 ba       	out	0x18, r1	; 24
 2ea:	08 95       	ret

000002ec <send_a_character>:
}

void send_a_character(unsigned char character)
{
    PORTB = character;
 2ec:	88 bb       	out	0x18, r24	; 24
    PORTD |= 1<<registerselection;
 2ee:	96 9a       	sbi	0x12, 6	; 18
    PORTD |= 1<<enable;
 2f0:	95 9a       	sbi	0x12, 5	; 18
 2f2:	8f ec       	ldi	r24, 0xCF	; 207
 2f4:	97 e0       	ldi	r25, 0x07	; 7
 2f6:	01 97       	sbiw	r24, 0x01	; 1
 2f8:	f1 f7       	brne	.-4      	; 0x2f6 <send_a_character+0xa>
 2fa:	00 c0       	rjmp	.+0      	; 0x2fc <send_a_character+0x10>
 2fc:	00 00       	nop
    _delay_ms(8);
    PORTD &= ~1<<enable;
 2fe:	82 b3       	in	r24, 0x12	; 18
 300:	80 7c       	andi	r24, 0xC0	; 192
 302:	82 bb       	out	0x12, r24	; 18
    PORTB = 0;
 304:	18 ba       	out	0x18, r1	; 24
 306:	08 95       	ret

00000308 <send_a_string>:
}
void send_a_string(char *string_of_characters)
{
 308:	cf 93       	push	r28
 30a:	df 93       	push	r29
 30c:	ec 01       	movw	r28, r24
    while(*string_of_characters > 0)
 30e:	88 81       	ld	r24, Y
 310:	88 23       	and	r24, r24
 312:	31 f0       	breq	.+12     	; 0x320 <send_a_string+0x18>
 314:	21 96       	adiw	r28, 0x01	; 1
    {
        send_a_character(*string_of_characters++);
 316:	0e 94 76 01 	call	0x2ec	; 0x2ec <send_a_character>
    PORTD &= ~1<<enable;
    PORTB = 0;
}
void send_a_string(char *string_of_characters)
{
    while(*string_of_characters > 0)
 31a:	89 91       	ld	r24, Y+
 31c:	81 11       	cpse	r24, r1
 31e:	fb cf       	rjmp	.-10     	; 0x316 <send_a_string+0xe>
    {
        send_a_character(*string_of_characters++);
    }
 320:	df 91       	pop	r29
 322:	cf 91       	pop	r28
 324:	08 95       	ret

00000326 <main>:
static volatile int i = 0;
static volatile int pulse2 = 0;
static volatile int j = 0;

int main(void)
{
 326:	cf 93       	push	r28
 328:	df 93       	push	r29
 32a:	cd b7       	in	r28, 0x3d	; 61
 32c:	de b7       	in	r29, 0x3e	; 62
 32e:	62 97       	sbiw	r28, 0x12	; 18
 330:	0f b6       	in	r0, 0x3f	; 63
 332:	f8 94       	cli
 334:	de bf       	out	0x3e, r29	; 62
 336:	0f be       	out	0x3f, r0	; 63
 338:	cd bf       	out	0x3d, r28	; 61
    DDRA = 0xFF;
 33a:	8f ef       	ldi	r24, 0xFF	; 255
 33c:	8a bb       	out	0x1a, r24	; 26
    DDRB = 0xFF;
 33e:	87 bb       	out	0x17, r24	; 23
	
    DDRD = 0b11110011;
 340:	83 ef       	ldi	r24, 0xF3	; 243
 342:	81 bb       	out	0x11, r24	; 17
	PORTA =0;
 344:	1b ba       	out	0x1b, r1	; 27
 346:	83 ed       	ldi	r24, 0xD3	; 211
 348:	90 e3       	ldi	r25, 0x30	; 48
 34a:	01 97       	sbiw	r24, 0x01	; 1
 34c:	f1 f7       	brne	.-4      	; 0x34a <main+0x24>
 34e:	00 c0       	rjmp	.+0      	; 0x350 <main+0x2a>
 350:	00 00       	nop
    _delay_ms(50);
    
    GICR = (1<<INT0)|(1<<INT1);
 352:	80 ec       	ldi	r24, 0xC0	; 192
 354:	8b bf       	out	0x3b, r24	; 59
    MCUCR=(1<<ISC00)|(1<<ISC10);
 356:	85 e0       	ldi	r24, 0x05	; 5
 358:	85 bf       	out	0x35, r24	; 53
    
    TCCR1A = 0;
 35a:	1f bc       	out	0x2f, r1	; 47
	int sum=0;
	for(p=0;p<10;p++)
		pattern[p]= 0;
		
	//bluetooth part
	USARTInit(12);
 35c:	8c e0       	ldi	r24, 0x0C	; 12
 35e:	90 e0       	ldi	r25, 0x00	; 0
 360:	0e 94 49 00 	call	0x92	; 0x92 <USARTInit>

    send_a_command(0x01); //Clear Screen 0x01 = 00000001
 364:	81 e0       	ldi	r24, 0x01	; 1
 366:	0e 94 68 01 	call	0x2d0	; 0x2d0 <send_a_command>
 36a:	e3 ed       	ldi	r30, 0xD3	; 211
 36c:	f0 e3       	ldi	r31, 0x30	; 48
 36e:	31 97       	sbiw	r30, 0x01	; 1
 370:	f1 f7       	brne	.-4      	; 0x36e <main+0x48>
 372:	00 c0       	rjmp	.+0      	; 0x374 <main+0x4e>
 374:	00 00       	nop
    _delay_ms(50);
    send_a_command(0x38);
 376:	88 e3       	ldi	r24, 0x38	; 56
 378:	0e 94 68 01 	call	0x2d0	; 0x2d0 <send_a_command>
 37c:	83 ed       	ldi	r24, 0xD3	; 211
 37e:	90 e3       	ldi	r25, 0x30	; 48
 380:	01 97       	sbiw	r24, 0x01	; 1
 382:	f1 f7       	brne	.-4      	; 0x380 <main+0x5a>
 384:	00 c0       	rjmp	.+0      	; 0x386 <main+0x60>
 386:	00 00       	nop
    _delay_ms(50);
    send_a_command(0b00001111);
 388:	8f e0       	ldi	r24, 0x0F	; 15
 38a:	0e 94 68 01 	call	0x2d0	; 0x2d0 <send_a_command>
 38e:	e3 ed       	ldi	r30, 0xD3	; 211
 390:	f0 e3       	ldi	r31, 0x30	; 48
 392:	31 97       	sbiw	r30, 0x01	; 1
 394:	f1 f7       	brne	.-4      	; 0x392 <main+0x6c>
 396:	00 c0       	rjmp	.+0      	; 0x398 <main+0x72>
 398:	00 00       	nop
    _delay_ms(50);
    
    sei();
 39a:	78 94       	sei
    MCUCR=(1<<ISC00)|(1<<ISC10);
    
    TCCR1A = 0;
    
    int16_t COUNTA = 0,COUNTB=0,prevdist=0,visitorCount=0,door2flag=0;
	int opendura = 0,p=0,entryflag=0,opening=0,closing=0,wait=0,current=0;
 39c:	1a 8a       	std	Y+18, r1	; 0x12
 39e:	19 8a       	std	Y+17, r1	; 0x11
 3a0:	41 2c       	mov	r4, r1
 3a2:	51 2c       	mov	r5, r1
    GICR = (1<<INT0)|(1<<INT1);
    MCUCR=(1<<ISC00)|(1<<ISC10);
    
    TCCR1A = 0;
    
    int16_t COUNTA = 0,COUNTB=0,prevdist=0,visitorCount=0,door2flag=0;
 3a4:	21 2c       	mov	r2, r1
 3a6:	31 2c       	mov	r3, r1
 3a8:	c1 2c       	mov	r12, r1
 3aa:	d1 2c       	mov	r13, r1
    while(1)
    {	
        PORTA|=(1<<PINA1);
        _delay_us(15);
        PORTA &=~(1<<PINA1);
        COUNTA = pulse/58;
 3ac:	0f 2e       	mov	r0, r31
 3ae:	fa e3       	ldi	r31, 0x3A	; 58
 3b0:	af 2e       	mov	r10, r31
 3b2:	b1 2c       	mov	r11, r1
 3b4:	f0 2d       	mov	r31, r0
    
    sei();
    
    while(1)
    {	
        PORTA|=(1<<PINA1);
 3b6:	d9 9a       	sbi	0x1b, 1	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3b8:	f5 e0       	ldi	r31, 0x05	; 5
 3ba:	fa 95       	dec	r31
 3bc:	f1 f7       	brne	.-4      	; 0x3ba <main+0x94>
        _delay_us(15);
        PORTA &=~(1<<PINA1);
 3be:	d9 98       	cbi	0x1b, 1	; 27
        COUNTA = pulse/58;
 3c0:	80 91 7a 00 	lds	r24, 0x007A
 3c4:	90 91 7b 00 	lds	r25, 0x007B
 3c8:	b5 01       	movw	r22, r10
 3ca:	0e 94 9f 02 	call	0x53e	; 0x53e <__divmodhi4>
 3ce:	8b 01       	movw	r16, r22
 3d0:	4b 01       	movw	r8, r22
		
		PORTA|=(1<<PINA2);
 3d2:	da 9a       	sbi	0x1b, 2	; 27
 3d4:	85 e0       	ldi	r24, 0x05	; 5
 3d6:	8a 95       	dec	r24
 3d8:	f1 f7       	brne	.-4      	; 0x3d6 <main+0xb0>
		_delay_us(15);
		PORTA &=~(1<<PINA2);
 3da:	da 98       	cbi	0x1b, 2	; 27
		COUNTB = pulse2/58;
 3dc:	80 91 76 00 	lds	r24, 0x0076
 3e0:	90 91 77 00 	lds	r25, 0x0077
 3e4:	b5 01       	movw	r22, r10
 3e6:	0e 94 9f 02 	call	0x53e	; 0x53e <__divmodhi4>
 3ea:	7b 01       	movw	r14, r22
 3ec:	3b 01       	movw	r6, r22
		
		send_a_string ("vis= ");
 3ee:	80 e6       	ldi	r24, 0x60	; 96
 3f0:	90 e0       	ldi	r25, 0x00	; 0
 3f2:	0e 94 84 01 	call	0x308	; 0x308 <send_a_string>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 3f6:	4a e0       	ldi	r20, 0x0A	; 10
 3f8:	be 01       	movw	r22, r28
 3fa:	6f 5f       	subi	r22, 0xFF	; 255
 3fc:	7f 4f       	sbci	r23, 0xFF	; 255
 3fe:	c6 01       	movw	r24, r12
 400:	0e 94 c7 02 	call	0x58e	; 0x58e <__itoa_ncheck>
		itoa(visitorCount,SHOWA,10);
		
		send_a_string(SHOWA);
 404:	ce 01       	movw	r24, r28
 406:	01 96       	adiw	r24, 0x01	; 1
 408:	0e 94 84 01 	call	0x308	; 0x308 <send_a_string>
		send_a_string("   ");
 40c:	80 e7       	ldi	r24, 0x70	; 112
 40e:	90 e0       	ldi	r25, 0x00	; 0
 410:	0e 94 84 01 	call	0x308	; 0x308 <send_a_string>
		send_a_command(0xc0);
 414:	80 ec       	ldi	r24, 0xC0	; 192
 416:	0e 94 68 01 	call	0x2d0	; 0x2d0 <send_a_command>
		send_a_string ("DISTA=");
 41a:	86 e6       	ldi	r24, 0x66	; 102
 41c:	90 e0       	ldi	r25, 0x00	; 0
 41e:	0e 94 84 01 	call	0x308	; 0x308 <send_a_string>
 422:	4a e0       	ldi	r20, 0x0A	; 10
 424:	be 01       	movw	r22, r28
 426:	6f 5f       	subi	r22, 0xFF	; 255
 428:	7f 4f       	sbci	r23, 0xFF	; 255
 42a:	c8 01       	movw	r24, r16
 42c:	0e 94 c7 02 	call	0x58e	; 0x58e <__itoa_ncheck>
		itoa(COUNTA,SHOWA,10);
		send_a_string(SHOWA);
 430:	ce 01       	movw	r24, r28
 432:	01 96       	adiw	r24, 0x01	; 1
 434:	0e 94 84 01 	call	0x308	; 0x308 <send_a_string>
		send_a_string ("cm    ");
 438:	8d e6       	ldi	r24, 0x6D	; 109
 43a:	90 e0       	ldi	r25, 0x00	; 0
 43c:	0e 94 84 01 	call	0x308	; 0x308 <send_a_string>
		
		send_a_command(0x80 + 0);	
 440:	80 e8       	ldi	r24, 0x80	; 128
 442:	0e 94 68 01 	call	0x2d0	; 0x2d0 <send_a_command>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 446:	e3 ec       	ldi	r30, 0xC3	; 195
 448:	f9 e0       	ldi	r31, 0x09	; 9
 44a:	31 97       	sbiw	r30, 0x01	; 1
 44c:	f1 f7       	brne	.-4      	; 0x44a <main+0x124>
 44e:	00 c0       	rjmp	.+0      	; 0x450 <main+0x12a>
 450:	00 00       	nop
        _delay_ms(10);
		
	
		if(COUNTA>=2&&COUNTA<=15&&opening==0)
 452:	02 50       	subi	r16, 0x02	; 2
 454:	11 09       	sbc	r17, r1
 456:	0e 30       	cpi	r16, 0x0E	; 14
 458:	11 05       	cpc	r17, r1
 45a:	d0 f4       	brcc	.+52     	; 0x490 <main+0x16a>
 45c:	89 89       	ldd	r24, Y+17	; 0x11
 45e:	9a 89       	ldd	r25, Y+18	; 0x12
 460:	89 2b       	or	r24, r25
 462:	b1 f4       	brne	.+44     	; 0x490 <main+0x16a>
 464:	88 e0       	ldi	r24, 0x08	; 8
 466:	90 e0       	ldi	r25, 0x00	; 0
				for(p=0;p<10;p++)
				pattern[p]= 0;
			}
			opening=1;
			for(p=0;p<8;p++){
				PORTA |=0b00000001;
 468:	d8 9a       	sbi	0x1b, 0	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 46a:	e3 ef       	ldi	r30, 0xF3	; 243
 46c:	f1 e0       	ldi	r31, 0x01	; 1
 46e:	31 97       	sbiw	r30, 0x01	; 1
 470:	f1 f7       	brne	.-4      	; 0x46e <main+0x148>
 472:	00 c0       	rjmp	.+0      	; 0x474 <main+0x14e>
 474:	00 00       	nop
				_delay_us(2000);
				PORTA &= 0b11111110;
 476:	d8 98       	cbi	0x1b, 0	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 478:	e7 e8       	ldi	r30, 0x87	; 135
 47a:	f3 e1       	ldi	r31, 0x13	; 19
 47c:	31 97       	sbiw	r30, 0x01	; 1
 47e:	f1 f7       	brne	.-4      	; 0x47c <main+0x156>
 480:	00 c0       	rjmp	.+0      	; 0x482 <main+0x15c>
 482:	00 00       	nop
 484:	01 97       	sbiw	r24, 0x01	; 1
				sum=0;
				for(p=0;p<10;p++)
				pattern[p]= 0;
			}
			opening=1;
			for(p=0;p<8;p++){
 486:	00 97       	sbiw	r24, 0x00	; 0
 488:	79 f7       	brne	.-34     	; 0x468 <main+0x142>
			{
				sum=0;
				for(p=0;p<10;p++)
				pattern[p]= 0;
			}
			opening=1;
 48a:	f1 e0       	ldi	r31, 0x01	; 1
 48c:	f9 8b       	std	Y+17, r31	; 0x11
 48e:	1a 8a       	std	Y+18, r1	; 0x12
				_delay_ms(20);
			}	
			//_delay_ms(2000);
		}
		
		if(COUNTA>15)
 490:	80 e1       	ldi	r24, 0x10	; 16
 492:	88 16       	cp	r8, r24
 494:	91 04       	cpc	r9, r1
 496:	04 f1       	brlt	.+64     	; 0x4d8 <main+0x1b2>
			opendura++;
 498:	9f ef       	ldi	r25, 0xFF	; 255
 49a:	49 1a       	sub	r4, r25
 49c:	59 0a       	sbc	r5, r25
		if(COUNTA>15&&opendura>8&&opening==1)
 49e:	e9 e0       	ldi	r30, 0x09	; 9
 4a0:	4e 16       	cp	r4, r30
 4a2:	51 04       	cpc	r5, r1
 4a4:	cc f0       	brlt	.+50     	; 0x4d8 <main+0x1b2>
 4a6:	89 89       	ldd	r24, Y+17	; 0x11
 4a8:	9a 89       	ldd	r25, Y+18	; 0x12
 4aa:	01 97       	sbiw	r24, 0x01	; 1
 4ac:	09 f0       	breq	.+2      	; 0x4b0 <main+0x18a>
 4ae:	3f c0       	rjmp	.+126    	; 0x52e <main+0x208>
 4b0:	88 e0       	ldi	r24, 0x08	; 8
 4b2:	90 e0       	ldi	r25, 0x00	; 0
		{//gate closing
			opening=0;
			opendura=0;
			//_delay_ms(3000);
			for(p=0;p<8;p++){
				PORTA |=0b00000001;
 4b4:	d8 9a       	sbi	0x1b, 0	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4b6:	e9 ef       	ldi	r30, 0xF9	; 249
 4b8:	f0 e0       	ldi	r31, 0x00	; 0
 4ba:	31 97       	sbiw	r30, 0x01	; 1
 4bc:	f1 f7       	brne	.-4      	; 0x4ba <main+0x194>
 4be:	00 c0       	rjmp	.+0      	; 0x4c0 <main+0x19a>
 4c0:	00 00       	nop
				_delay_us(1000);
				PORTA &= 0b11111110;
 4c2:	d8 98       	cbi	0x1b, 0	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4c4:	e7 e8       	ldi	r30, 0x87	; 135
 4c6:	f3 e1       	ldi	r31, 0x13	; 19
 4c8:	31 97       	sbiw	r30, 0x01	; 1
 4ca:	f1 f7       	brne	.-4      	; 0x4c8 <main+0x1a2>
 4cc:	00 c0       	rjmp	.+0      	; 0x4ce <main+0x1a8>
 4ce:	00 00       	nop
 4d0:	01 97       	sbiw	r24, 0x01	; 1
		if(COUNTA>15&&opendura>8&&opening==1)
		{//gate closing
			opening=0;
			opendura=0;
			//_delay_ms(3000);
			for(p=0;p<8;p++){
 4d2:	00 97       	sbiw	r24, 0x00	; 0
 4d4:	79 f7       	brne	.-34     	; 0x4b4 <main+0x18e>
 4d6:	27 c0       	rjmp	.+78     	; 0x526 <main+0x200>
			}
		}
		
		//updating pattern
	
		if(COUNTB>2&&COUNTB<15&&opening==1){
 4d8:	f3 e0       	ldi	r31, 0x03	; 3
 4da:	ef 1a       	sub	r14, r31
 4dc:	f1 08       	sbc	r15, r1
 4de:	8c e0       	ldi	r24, 0x0C	; 12
 4e0:	e8 16       	cp	r14, r24
 4e2:	f1 04       	cpc	r15, r1
 4e4:	60 f4       	brcc	.+24     	; 0x4fe <main+0x1d8>
			pattern[0]= COUNTB;
			sum=sum+COUNTB;
		}
		
		//increasing visitorcount
		if(COUNTB>2&&COUNTB<15&&door2flag==0){	
 4e6:	21 14       	cp	r2, r1
 4e8:	31 04       	cpc	r3, r1
 4ea:	49 f4       	brne	.+18     	; 0x4fe <main+0x1d8>
			visitorCount++;
 4ec:	9f ef       	ldi	r25, 0xFF	; 255
 4ee:	c9 1a       	sub	r12, r25
 4f0:	d9 0a       	sbc	r13, r25
			UWriteData('1');
 4f2:	81 e3       	ldi	r24, 0x31	; 49
 4f4:	0e 94 04 01 	call	0x208	; 0x208 <UWriteData>
			door2flag=1;	
 4f8:	22 24       	eor	r2, r2
 4fa:	23 94       	inc	r2
 4fc:	31 2c       	mov	r3, r1
		}
		
		if(COUNTB>15){
 4fe:	e0 e1       	ldi	r30, 0x10	; 16
 500:	6e 16       	cp	r6, r30
 502:	71 04       	cpc	r7, r1
 504:	14 f0       	brlt	.+4      	; 0x50a <main+0x1e4>
			door2flag=0;
 506:	21 2c       	mov	r2, r1
 508:	31 2c       	mov	r3, r1
		}
		
		char readData=UReadData();
 50a:	0e 94 c9 00 	call	0x192	; 0x192 <UReadData>
		if(readData)
 50e:	88 23       	and	r24, r24
 510:	19 f0       	breq	.+6      	; 0x518 <main+0x1f2>
			visitorCount--;
 512:	f1 e0       	ldi	r31, 0x01	; 1
 514:	cf 1a       	sub	r12, r31
 516:	d1 08       	sbc	r13, r1
 518:	87 ea       	ldi	r24, 0xA7	; 167
 51a:	91 e6       	ldi	r25, 0x61	; 97
 51c:	01 97       	sbiw	r24, 0x01	; 1
 51e:	f1 f7       	brne	.-4      	; 0x51c <main+0x1f6>
 520:	00 c0       	rjmp	.+0      	; 0x522 <main+0x1fc>
 522:	00 00       	nop
 524:	48 cf       	rjmp	.-368    	; 0x3b6 <main+0x90>
		
		if(COUNTA>15)
			opendura++;
		if(COUNTA>15&&opendura>8&&opening==1)
		{//gate closing
			opening=0;
 526:	19 8a       	std	Y+17, r1	; 0x11
 528:	1a 8a       	std	Y+18, r1	; 0x12
			opendura=0;
 52a:	41 2c       	mov	r4, r1
 52c:	51 2c       	mov	r5, r1
			}
		}
		
		//updating pattern
	
		if(COUNTB>2&&COUNTB<15&&opening==1){
 52e:	93 e0       	ldi	r25, 0x03	; 3
 530:	e9 1a       	sub	r14, r25
 532:	f1 08       	sbc	r15, r1
			pattern[0]= COUNTB;
			sum=sum+COUNTB;
		}
		
		//increasing visitorcount
		if(COUNTB>2&&COUNTB<15&&door2flag==0){	
 534:	ec e0       	ldi	r30, 0x0C	; 12
 536:	ee 16       	cp	r14, r30
 538:	f1 04       	cpc	r15, r1
 53a:	a8 f2       	brcs	.-86     	; 0x4e6 <main+0x1c0>
 53c:	e0 cf       	rjmp	.-64     	; 0x4fe <main+0x1d8>

0000053e <__divmodhi4>:
 53e:	97 fb       	bst	r25, 7
 540:	07 2e       	mov	r0, r23
 542:	16 f4       	brtc	.+4      	; 0x548 <__divmodhi4+0xa>
 544:	00 94       	com	r0
 546:	07 d0       	rcall	.+14     	; 0x556 <__divmodhi4_neg1>
 548:	77 fd       	sbrc	r23, 7
 54a:	09 d0       	rcall	.+18     	; 0x55e <__divmodhi4_neg2>
 54c:	0e 94 b3 02 	call	0x566	; 0x566 <__udivmodhi4>
 550:	07 fc       	sbrc	r0, 7
 552:	05 d0       	rcall	.+10     	; 0x55e <__divmodhi4_neg2>
 554:	3e f4       	brtc	.+14     	; 0x564 <__divmodhi4_exit>

00000556 <__divmodhi4_neg1>:
 556:	90 95       	com	r25
 558:	81 95       	neg	r24
 55a:	9f 4f       	sbci	r25, 0xFF	; 255
 55c:	08 95       	ret

0000055e <__divmodhi4_neg2>:
 55e:	70 95       	com	r23
 560:	61 95       	neg	r22
 562:	7f 4f       	sbci	r23, 0xFF	; 255

00000564 <__divmodhi4_exit>:
 564:	08 95       	ret

00000566 <__udivmodhi4>:
 566:	aa 1b       	sub	r26, r26
 568:	bb 1b       	sub	r27, r27
 56a:	51 e1       	ldi	r21, 0x11	; 17
 56c:	07 c0       	rjmp	.+14     	; 0x57c <__udivmodhi4_ep>

0000056e <__udivmodhi4_loop>:
 56e:	aa 1f       	adc	r26, r26
 570:	bb 1f       	adc	r27, r27
 572:	a6 17       	cp	r26, r22
 574:	b7 07       	cpc	r27, r23
 576:	10 f0       	brcs	.+4      	; 0x57c <__udivmodhi4_ep>
 578:	a6 1b       	sub	r26, r22
 57a:	b7 0b       	sbc	r27, r23

0000057c <__udivmodhi4_ep>:
 57c:	88 1f       	adc	r24, r24
 57e:	99 1f       	adc	r25, r25
 580:	5a 95       	dec	r21
 582:	a9 f7       	brne	.-22     	; 0x56e <__udivmodhi4_loop>
 584:	80 95       	com	r24
 586:	90 95       	com	r25
 588:	bc 01       	movw	r22, r24
 58a:	cd 01       	movw	r24, r26
 58c:	08 95       	ret

0000058e <__itoa_ncheck>:
 58e:	bb 27       	eor	r27, r27
 590:	4a 30       	cpi	r20, 0x0A	; 10
 592:	31 f4       	brne	.+12     	; 0x5a0 <__itoa_ncheck+0x12>
 594:	99 23       	and	r25, r25
 596:	22 f4       	brpl	.+8      	; 0x5a0 <__itoa_ncheck+0x12>
 598:	bd e2       	ldi	r27, 0x2D	; 45
 59a:	90 95       	com	r25
 59c:	81 95       	neg	r24
 59e:	9f 4f       	sbci	r25, 0xFF	; 255
 5a0:	0c 94 d3 02 	jmp	0x5a6	; 0x5a6 <__utoa_common>

000005a4 <__utoa_ncheck>:
 5a4:	bb 27       	eor	r27, r27

000005a6 <__utoa_common>:
 5a6:	fb 01       	movw	r30, r22
 5a8:	55 27       	eor	r21, r21
 5aa:	aa 27       	eor	r26, r26
 5ac:	88 0f       	add	r24, r24
 5ae:	99 1f       	adc	r25, r25
 5b0:	aa 1f       	adc	r26, r26
 5b2:	a4 17       	cp	r26, r20
 5b4:	10 f0       	brcs	.+4      	; 0x5ba <__utoa_common+0x14>
 5b6:	a4 1b       	sub	r26, r20
 5b8:	83 95       	inc	r24
 5ba:	50 51       	subi	r21, 0x10	; 16
 5bc:	b9 f7       	brne	.-18     	; 0x5ac <__utoa_common+0x6>
 5be:	a0 5d       	subi	r26, 0xD0	; 208
 5c0:	aa 33       	cpi	r26, 0x3A	; 58
 5c2:	08 f0       	brcs	.+2      	; 0x5c6 <__utoa_common+0x20>
 5c4:	a9 5d       	subi	r26, 0xD9	; 217
 5c6:	a1 93       	st	Z+, r26
 5c8:	00 97       	sbiw	r24, 0x00	; 0
 5ca:	79 f7       	brne	.-34     	; 0x5aa <__utoa_common+0x4>
 5cc:	b1 11       	cpse	r27, r1
 5ce:	b1 93       	st	Z+, r27
 5d0:	11 92       	st	Z+, r1
 5d2:	cb 01       	movw	r24, r22
 5d4:	0c 94 ec 02 	jmp	0x5d8	; 0x5d8 <strrev>

000005d8 <strrev>:
 5d8:	dc 01       	movw	r26, r24
 5da:	fc 01       	movw	r30, r24
 5dc:	67 2f       	mov	r22, r23
 5de:	71 91       	ld	r23, Z+
 5e0:	77 23       	and	r23, r23
 5e2:	e1 f7       	brne	.-8      	; 0x5dc <strrev+0x4>
 5e4:	32 97       	sbiw	r30, 0x02	; 2
 5e6:	04 c0       	rjmp	.+8      	; 0x5f0 <strrev+0x18>
 5e8:	7c 91       	ld	r23, X
 5ea:	6d 93       	st	X+, r22
 5ec:	70 83       	st	Z, r23
 5ee:	62 91       	ld	r22, -Z
 5f0:	ae 17       	cp	r26, r30
 5f2:	bf 07       	cpc	r27, r31
 5f4:	c8 f3       	brcs	.-14     	; 0x5e8 <strrev+0x10>
 5f6:	08 95       	ret

000005f8 <_exit>:
 5f8:	f8 94       	cli

000005fa <__stop_program>:
 5fa:	ff cf       	rjmp	.-2      	; 0x5fa <__stop_program>
