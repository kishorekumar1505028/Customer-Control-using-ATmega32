
Sonar.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000748  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000012  00800060  00000748  000007dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800072  00800072  000007ee  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000007ee  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000000c8  00000000  00000000  0000081e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000133d  00000000  00000000  000008e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000002e9  00000000  00000000  00001c23  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004ba  00000000  00000000  00001f0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001fc  00000000  00000000  000023c8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002ef  00000000  00000000  000025c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000071f  00000000  00000000  000028b3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000b8  00000000  00000000  00002fd2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 98 02 	jmp	0x530	; 0x530 <__vector_1>
   8:	0c 94 c8 02 	jmp	0x590	; 0x590 <__vector_2>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e4       	ldi	r30, 0x48	; 72
  68:	f7 e0       	ldi	r31, 0x07	; 7
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 37       	cpi	r26, 0x72	; 114
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a2 e7       	ldi	r26, 0x72	; 114
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a8 37       	cpi	r26, 0x78	; 120
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <main>
  8a:	0c 94 a2 03 	jmp	0x744	; 0x744 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <pinChange>:
	pinChange(D3,0);
	
	if(a & 16)
	pinChange(D4,1);
	else
	pinChange(D4,0);
  92:	67 2b       	or	r22, r23
  94:	09 f0       	breq	.+2      	; 0x98 <pinChange+0x6>
  96:	9f c0       	rjmp	.+318    	; 0x1d6 <pinChange+0x144>
  98:	00 97       	sbiw	r24, 0x00	; 0

	if(a & 32)
  9a:	11 f4       	brne	.+4      	; 0xa0 <pinChange+0xe>
  9c:	d8 98       	cbi	0x1b, 0	; 27
	pinChange(D5,1);
  9e:	08 95       	ret
  a0:	81 30       	cpi	r24, 0x01	; 1
  a2:	91 05       	cpc	r25, r1
  a4:	11 f4       	brne	.+4      	; 0xaa <pinChange+0x18>
  a6:	d9 98       	cbi	0x1b, 1	; 27
  a8:	08 95       	ret
  aa:	82 30       	cpi	r24, 0x02	; 2
	else
	pinChange(D5,0);
  ac:	91 05       	cpc	r25, r1
  ae:	11 f4       	brne	.+4      	; 0xb4 <pinChange+0x22>
  b0:	da 98       	cbi	0x1b, 2	; 27
  b2:	08 95       	ret
  b4:	83 30       	cpi	r24, 0x03	; 3
  b6:	91 05       	cpc	r25, r1
	
	if(a & 64)
  b8:	11 f4       	brne	.+4      	; 0xbe <pinChange+0x2c>
  ba:	db 98       	cbi	0x1b, 3	; 27
	pinChange(D6,1);
  bc:	08 95       	ret
  be:	84 30       	cpi	r24, 0x04	; 4
  c0:	91 05       	cpc	r25, r1
  c2:	11 f4       	brne	.+4      	; 0xc8 <pinChange+0x36>
  c4:	dc 98       	cbi	0x1b, 4	; 27
  c6:	08 95       	ret
  c8:	85 30       	cpi	r24, 0x05	; 5
	else
	pinChange(D6,0);
  ca:	91 05       	cpc	r25, r1
  cc:	11 f4       	brne	.+4      	; 0xd2 <pinChange+0x40>
  ce:	dd 98       	cbi	0x1b, 5	; 27
  d0:	08 95       	ret
  d2:	86 30       	cpi	r24, 0x06	; 6
  d4:	91 05       	cpc	r25, r1
	
	if(a & 128)
  d6:	11 f4       	brne	.+4      	; 0xdc <pinChange+0x4a>
  d8:	de 98       	cbi	0x1b, 6	; 27
	pinChange(D7,1);
  da:	08 95       	ret
  dc:	87 30       	cpi	r24, 0x07	; 7
  de:	91 05       	cpc	r25, r1
  e0:	11 f4       	brne	.+4      	; 0xe6 <pinChange+0x54>
  e2:	df 98       	cbi	0x1b, 7	; 27
  e4:	08 95       	ret
  e6:	8a 30       	cpi	r24, 0x0A	; 10
	else
	pinChange(D7,0);
  e8:	91 05       	cpc	r25, r1
  ea:	11 f4       	brne	.+4      	; 0xf0 <pinChange+0x5e>
  ec:	c0 98       	cbi	0x18, 0	; 24
  ee:	08 95       	ret
  f0:	8b 30       	cpi	r24, 0x0B	; 11
  f2:	91 05       	cpc	r25, r1
}
  f4:	11 f4       	brne	.+4      	; 0xfa <pinChange+0x68>
  f6:	c1 98       	cbi	0x18, 1	; 24
		else if(a == eS_PORTA7)
		  PORTA &= ~(1<<PA7);
		else if(a == eS_PORTB0)
		  PORTB &= ~(1<<PB0);  
		else if(a == eS_PORTB1)
		  PORTB &= ~(1<<PB1);
  f8:	08 95       	ret
		else if(a == eS_PORTB2)
  fa:	8c 30       	cpi	r24, 0x0C	; 12
  fc:	91 05       	cpc	r25, r1
  fe:	11 f4       	brne	.+4      	; 0x104 <pinChange+0x72>
		  PORTB &= ~(1<<PB2);  
 100:	c2 98       	cbi	0x18, 2	; 24
 102:	08 95       	ret
		else if(a == eS_PORTB3)
 104:	8d 30       	cpi	r24, 0x0D	; 13
 106:	91 05       	cpc	r25, r1
 108:	11 f4       	brne	.+4      	; 0x10e <pinChange+0x7c>
		  PORTB &= ~(1<<PB3);  
 10a:	c3 98       	cbi	0x18, 3	; 24
 10c:	08 95       	ret
		else if(a == eS_PORTB4)
 10e:	8e 30       	cpi	r24, 0x0E	; 14
 110:	91 05       	cpc	r25, r1
 112:	11 f4       	brne	.+4      	; 0x118 <pinChange+0x86>
		  PORTB &= ~(1<<PB4);  
 114:	c4 98       	cbi	0x18, 4	; 24
 116:	08 95       	ret
		else if(a == eS_PORTB5)
 118:	8f 30       	cpi	r24, 0x0F	; 15
 11a:	91 05       	cpc	r25, r1
 11c:	11 f4       	brne	.+4      	; 0x122 <pinChange+0x90>
		  PORTB &= ~(1<<PB5);  
 11e:	c5 98       	cbi	0x18, 5	; 24
 120:	08 95       	ret
		else if(a == eS_PORTB6)
 122:	80 31       	cpi	r24, 0x10	; 16
 124:	91 05       	cpc	r25, r1
 126:	11 f4       	brne	.+4      	; 0x12c <pinChange+0x9a>
		  PORTB &= ~(1<<PB6);  
 128:	c6 98       	cbi	0x18, 6	; 24
 12a:	08 95       	ret
		else if(a == eS_PORTB7)
 12c:	81 31       	cpi	r24, 0x11	; 17
 12e:	91 05       	cpc	r25, r1
 130:	11 f4       	brne	.+4      	; 0x136 <pinChange+0xa4>
		  PORTB &= ~(1<<PB7);
 132:	c7 98       	cbi	0x18, 7	; 24
 134:	08 95       	ret
		else if(a == eS_PORTC0)
 136:	84 31       	cpi	r24, 0x14	; 20
 138:	91 05       	cpc	r25, r1
 13a:	11 f4       	brne	.+4      	; 0x140 <pinChange+0xae>
		  PORTC &= ~(1<<PC0);   
 13c:	a8 98       	cbi	0x15, 0	; 21
 13e:	08 95       	ret
		else if(a == eS_PORTC1)
 140:	85 31       	cpi	r24, 0x15	; 21
 142:	91 05       	cpc	r25, r1
 144:	11 f4       	brne	.+4      	; 0x14a <pinChange+0xb8>
		  PORTC &= ~(1<<PC1); 
 146:	a9 98       	cbi	0x15, 1	; 21
 148:	08 95       	ret
		else if(a == eS_PORTC2)
 14a:	86 31       	cpi	r24, 0x16	; 22
 14c:	91 05       	cpc	r25, r1
 14e:	11 f4       	brne	.+4      	; 0x154 <pinChange+0xc2>
		  PORTC &= ~(1<<PC2);
 150:	aa 98       	cbi	0x15, 2	; 21
 152:	08 95       	ret
		else if(a == eS_PORTC3)
 154:	87 31       	cpi	r24, 0x17	; 23
 156:	91 05       	cpc	r25, r1
 158:	11 f4       	brne	.+4      	; 0x15e <pinChange+0xcc>
		  PORTC &= ~(1<<PC3);   
 15a:	ab 98       	cbi	0x15, 3	; 21
 15c:	08 95       	ret
		else if(a == eS_PORTC4)
 15e:	88 31       	cpi	r24, 0x18	; 24
 160:	91 05       	cpc	r25, r1
 162:	11 f4       	brne	.+4      	; 0x168 <pinChange+0xd6>
		  PORTC &= ~(1<<PC4);  
 164:	ac 98       	cbi	0x15, 4	; 21
 166:	08 95       	ret
		else if(a == eS_PORTC5)
 168:	89 31       	cpi	r24, 0x19	; 25
 16a:	91 05       	cpc	r25, r1
 16c:	11 f4       	brne	.+4      	; 0x172 <pinChange+0xe0>
		  PORTC &= ~(1<<PC5);  
 16e:	ad 98       	cbi	0x15, 5	; 21
 170:	08 95       	ret
        else if(a == eS_PORTC6)
 172:	8a 31       	cpi	r24, 0x1A	; 26
 174:	91 05       	cpc	r25, r1
 176:	11 f4       	brne	.+4      	; 0x17c <pinChange+0xea>
          PORTC &= ~(1<<PC6);		
 178:	ae 98       	cbi	0x15, 6	; 21
 17a:	08 95       	ret
		else if(a == eS_PORTC7)
 17c:	8b 31       	cpi	r24, 0x1B	; 27
 17e:	91 05       	cpc	r25, r1
 180:	11 f4       	brne	.+4      	; 0x186 <pinChange+0xf4>
		  PORTC &= ~(1<<PC7);
 182:	af 98       	cbi	0x15, 7	; 21
 184:	08 95       	ret
		else if(a == eS_PORTD0)
 186:	8e 31       	cpi	r24, 0x1E	; 30
 188:	91 05       	cpc	r25, r1
 18a:	11 f4       	brne	.+4      	; 0x190 <pinChange+0xfe>
		  PORTD &= ~(1<<PD0);
 18c:	90 98       	cbi	0x12, 0	; 18
 18e:	08 95       	ret
		else if(a == eS_PORTD1)
 190:	8f 31       	cpi	r24, 0x1F	; 31
 192:	91 05       	cpc	r25, r1
 194:	11 f4       	brne	.+4      	; 0x19a <pinChange+0x108>
		  PORTD &= ~(1<<PD1);  
 196:	91 98       	cbi	0x12, 1	; 18
 198:	08 95       	ret
		else if(a == eS_PORTD2)
 19a:	80 32       	cpi	r24, 0x20	; 32
 19c:	91 05       	cpc	r25, r1
 19e:	11 f4       	brne	.+4      	; 0x1a4 <pinChange+0x112>
		  PORTD &= ~(1<<PD2);
 1a0:	92 98       	cbi	0x12, 2	; 18
 1a2:	08 95       	ret
		else if(a == eS_PORTD3)
 1a4:	81 32       	cpi	r24, 0x21	; 33
 1a6:	91 05       	cpc	r25, r1
 1a8:	11 f4       	brne	.+4      	; 0x1ae <pinChange+0x11c>
		  PORTD &= ~(1<<PD3);
 1aa:	93 98       	cbi	0x12, 3	; 18
 1ac:	08 95       	ret
		else if(a == eS_PORTD4)
 1ae:	82 32       	cpi	r24, 0x22	; 34
 1b0:	91 05       	cpc	r25, r1
 1b2:	11 f4       	brne	.+4      	; 0x1b8 <pinChange+0x126>
		  PORTD &= ~(1<<PD4);
 1b4:	94 98       	cbi	0x12, 4	; 18
 1b6:	08 95       	ret
		else if(a == eS_PORTD5)
 1b8:	83 32       	cpi	r24, 0x23	; 35
 1ba:	91 05       	cpc	r25, r1
 1bc:	11 f4       	brne	.+4      	; 0x1c2 <pinChange+0x130>
		  PORTD &= ~(1<<PD5);
 1be:	95 98       	cbi	0x12, 5	; 18
 1c0:	08 95       	ret
		else if(a == eS_PORTD6)
 1c2:	84 32       	cpi	r24, 0x24	; 36
 1c4:	91 05       	cpc	r25, r1
 1c6:	11 f4       	brne	.+4      	; 0x1cc <pinChange+0x13a>
		  PORTD &= ~(1<<PD6);   
 1c8:	96 98       	cbi	0x12, 6	; 18
 1ca:	08 95       	ret
		else if(a == eS_PORTD7)
 1cc:	85 97       	sbiw	r24, 0x25	; 37
 1ce:	09 f0       	breq	.+2      	; 0x1d2 <pinChange+0x140>
 1d0:	9f c0       	rjmp	.+318    	; 0x310 <pinChange+0x27e>
		  PORTD &= ~(1<<PD7);           
 1d2:	97 98       	cbi	0x12, 7	; 18
 1d4:	08 95       	ret
	}
	else
	{
		if(a == eS_PORTA0)
 1d6:	00 97       	sbiw	r24, 0x00	; 0
 1d8:	11 f4       	brne	.+4      	; 0x1de <pinChange+0x14c>
		  PORTA |= (1<<PA0);
 1da:	d8 9a       	sbi	0x1b, 0	; 27
 1dc:	08 95       	ret
		else if(a == eS_PORTA1)
 1de:	81 30       	cpi	r24, 0x01	; 1
 1e0:	91 05       	cpc	r25, r1
 1e2:	11 f4       	brne	.+4      	; 0x1e8 <pinChange+0x156>
		  PORTA |= (1<<PA1);
 1e4:	d9 9a       	sbi	0x1b, 1	; 27
 1e6:	08 95       	ret
		else if(a == eS_PORTA2)
 1e8:	82 30       	cpi	r24, 0x02	; 2
 1ea:	91 05       	cpc	r25, r1
 1ec:	11 f4       	brne	.+4      	; 0x1f2 <pinChange+0x160>
		  PORTA |= (1<<PA2);
 1ee:	da 9a       	sbi	0x1b, 2	; 27
 1f0:	08 95       	ret
		else if(a == eS_PORTA3)
 1f2:	83 30       	cpi	r24, 0x03	; 3
 1f4:	91 05       	cpc	r25, r1
 1f6:	11 f4       	brne	.+4      	; 0x1fc <pinChange+0x16a>
		  PORTA |= (1<<PA3);
 1f8:	db 9a       	sbi	0x1b, 3	; 27
 1fa:	08 95       	ret
		else if(a == eS_PORTA4)
 1fc:	84 30       	cpi	r24, 0x04	; 4
 1fe:	91 05       	cpc	r25, r1
 200:	11 f4       	brne	.+4      	; 0x206 <pinChange+0x174>
		  PORTA |= (1<<PA4);
 202:	dc 9a       	sbi	0x1b, 4	; 27
 204:	08 95       	ret
		else if(a == eS_PORTA5)
 206:	85 30       	cpi	r24, 0x05	; 5
 208:	91 05       	cpc	r25, r1
 20a:	11 f4       	brne	.+4      	; 0x210 <pinChange+0x17e>
		  PORTA |= (1<<PA5);
 20c:	dd 9a       	sbi	0x1b, 5	; 27
 20e:	08 95       	ret
		else if(a == eS_PORTA6)
 210:	86 30       	cpi	r24, 0x06	; 6
 212:	91 05       	cpc	r25, r1
 214:	11 f4       	brne	.+4      	; 0x21a <pinChange+0x188>
		  PORTA |= (1<<PA6);
 216:	de 9a       	sbi	0x1b, 6	; 27
 218:	08 95       	ret
		else if(a == eS_PORTA7)
 21a:	87 30       	cpi	r24, 0x07	; 7
 21c:	91 05       	cpc	r25, r1
 21e:	11 f4       	brne	.+4      	; 0x224 <pinChange+0x192>
		  PORTA |= (1<<PA7);
 220:	df 9a       	sbi	0x1b, 7	; 27
 222:	08 95       	ret
		else if(a == eS_PORTB0)
 224:	8a 30       	cpi	r24, 0x0A	; 10
 226:	91 05       	cpc	r25, r1
 228:	11 f4       	brne	.+4      	; 0x22e <pinChange+0x19c>
	  	  PORTB |= (1<<PB0);
 22a:	c0 9a       	sbi	0x18, 0	; 24
 22c:	08 95       	ret
		else if(a == eS_PORTB1)
 22e:	8b 30       	cpi	r24, 0x0B	; 11
 230:	91 05       	cpc	r25, r1
 232:	11 f4       	brne	.+4      	; 0x238 <pinChange+0x1a6>
		  PORTB |= (1<<PB1);
 234:	c1 9a       	sbi	0x18, 1	; 24
 236:	08 95       	ret
		else if(a == eS_PORTB2)
 238:	8c 30       	cpi	r24, 0x0C	; 12
 23a:	91 05       	cpc	r25, r1
 23c:	11 f4       	brne	.+4      	; 0x242 <pinChange+0x1b0>
		  PORTB |= (1<<PB2);
 23e:	c2 9a       	sbi	0x18, 2	; 24
 240:	08 95       	ret
		else if(a == eS_PORTB3)
 242:	8d 30       	cpi	r24, 0x0D	; 13
 244:	91 05       	cpc	r25, r1
 246:	11 f4       	brne	.+4      	; 0x24c <pinChange+0x1ba>
		  PORTB |= (1<<PB3);
 248:	c3 9a       	sbi	0x18, 3	; 24
 24a:	08 95       	ret
		else if(a == eS_PORTB4)
 24c:	8e 30       	cpi	r24, 0x0E	; 14
 24e:	91 05       	cpc	r25, r1
 250:	11 f4       	brne	.+4      	; 0x256 <pinChange+0x1c4>
		  PORTB |= (1<<PB4);
 252:	c4 9a       	sbi	0x18, 4	; 24
 254:	08 95       	ret
		else if(a == eS_PORTB5)
 256:	8f 30       	cpi	r24, 0x0F	; 15
 258:	91 05       	cpc	r25, r1
 25a:	11 f4       	brne	.+4      	; 0x260 <pinChange+0x1ce>
		  PORTB |= (1<<PB5);
 25c:	c5 9a       	sbi	0x18, 5	; 24
 25e:	08 95       	ret
		else if(a == eS_PORTB6)
 260:	80 31       	cpi	r24, 0x10	; 16
 262:	91 05       	cpc	r25, r1
 264:	11 f4       	brne	.+4      	; 0x26a <pinChange+0x1d8>
		  PORTB |= (1<<PB6);
 266:	c6 9a       	sbi	0x18, 6	; 24
 268:	08 95       	ret
		else if(a == eS_PORTB7)
 26a:	81 31       	cpi	r24, 0x11	; 17
 26c:	91 05       	cpc	r25, r1
 26e:	11 f4       	brne	.+4      	; 0x274 <pinChange+0x1e2>
		  PORTB |= (1<<PB7);
 270:	c7 9a       	sbi	0x18, 7	; 24
 272:	08 95       	ret
		else if(a == eS_PORTC0)
 274:	84 31       	cpi	r24, 0x14	; 20
 276:	91 05       	cpc	r25, r1
 278:	11 f4       	brne	.+4      	; 0x27e <pinChange+0x1ec>
		  PORTC |= (1<<PC0);
 27a:	a8 9a       	sbi	0x15, 0	; 21
 27c:	08 95       	ret
		else if(a == eS_PORTC1)
 27e:	85 31       	cpi	r24, 0x15	; 21
 280:	91 05       	cpc	r25, r1
 282:	11 f4       	brne	.+4      	; 0x288 <pinChange+0x1f6>
		  PORTC |= (1<<PC1);
 284:	a9 9a       	sbi	0x15, 1	; 21
 286:	08 95       	ret
		else if(a == eS_PORTC2)
 288:	86 31       	cpi	r24, 0x16	; 22
 28a:	91 05       	cpc	r25, r1
 28c:	11 f4       	brne	.+4      	; 0x292 <pinChange+0x200>
	  	  PORTC |= (1<<PC2);
 28e:	aa 9a       	sbi	0x15, 2	; 21
 290:	08 95       	ret
		else if(a == eS_PORTC3)
 292:	87 31       	cpi	r24, 0x17	; 23
 294:	91 05       	cpc	r25, r1
 296:	11 f4       	brne	.+4      	; 0x29c <pinChange+0x20a>
		  PORTC |= (1<<PC3);
 298:	ab 9a       	sbi	0x15, 3	; 21
 29a:	08 95       	ret
		else if(a == eS_PORTC4)
 29c:	88 31       	cpi	r24, 0x18	; 24
 29e:	91 05       	cpc	r25, r1
 2a0:	11 f4       	brne	.+4      	; 0x2a6 <pinChange+0x214>
		  PORTC |= (1<<PC4);
 2a2:	ac 9a       	sbi	0x15, 4	; 21
 2a4:	08 95       	ret
		else if(a == eS_PORTC5)
 2a6:	89 31       	cpi	r24, 0x19	; 25
 2a8:	91 05       	cpc	r25, r1
 2aa:	11 f4       	brne	.+4      	; 0x2b0 <pinChange+0x21e>
		  PORTC |= (1<<PC5);
 2ac:	ad 9a       	sbi	0x15, 5	; 21
 2ae:	08 95       	ret
		else if(a == eS_PORTC6)
 2b0:	8a 31       	cpi	r24, 0x1A	; 26
 2b2:	91 05       	cpc	r25, r1
 2b4:	11 f4       	brne	.+4      	; 0x2ba <pinChange+0x228>
		  PORTC |= (1<<PC6);  
 2b6:	ae 9a       	sbi	0x15, 6	; 21
 2b8:	08 95       	ret
		else if(a == eS_PORTC7)
 2ba:	8b 31       	cpi	r24, 0x1B	; 27
 2bc:	91 05       	cpc	r25, r1
 2be:	11 f4       	brne	.+4      	; 0x2c4 <pinChange+0x232>
		  PORTC |= (1<<PC7);
 2c0:	af 9a       	sbi	0x15, 7	; 21
 2c2:	08 95       	ret
		else if(a == eS_PORTD0)
 2c4:	8e 31       	cpi	r24, 0x1E	; 30
 2c6:	91 05       	cpc	r25, r1
 2c8:	11 f4       	brne	.+4      	; 0x2ce <pinChange+0x23c>
		  PORTD |= (1<<PD0);
 2ca:	90 9a       	sbi	0x12, 0	; 18
 2cc:	08 95       	ret
		else if(a == eS_PORTD1)
 2ce:	8f 31       	cpi	r24, 0x1F	; 31
 2d0:	91 05       	cpc	r25, r1
 2d2:	11 f4       	brne	.+4      	; 0x2d8 <pinChange+0x246>
		  PORTD |= (1<<PD1);
 2d4:	91 9a       	sbi	0x12, 1	; 18
 2d6:	08 95       	ret
		else if(a == eS_PORTD2)
 2d8:	80 32       	cpi	r24, 0x20	; 32
 2da:	91 05       	cpc	r25, r1
 2dc:	11 f4       	brne	.+4      	; 0x2e2 <pinChange+0x250>
		  PORTD |= (1<<PD2);
 2de:	92 9a       	sbi	0x12, 2	; 18
 2e0:	08 95       	ret
		else if(a == eS_PORTD3)
 2e2:	81 32       	cpi	r24, 0x21	; 33
 2e4:	91 05       	cpc	r25, r1
 2e6:	11 f4       	brne	.+4      	; 0x2ec <pinChange+0x25a>
		  PORTD |= (1<<PD3);
 2e8:	93 9a       	sbi	0x12, 3	; 18
 2ea:	08 95       	ret
		else if(a == eS_PORTD4)
 2ec:	82 32       	cpi	r24, 0x22	; 34
 2ee:	91 05       	cpc	r25, r1
 2f0:	11 f4       	brne	.+4      	; 0x2f6 <pinChange+0x264>
		  PORTD |= (1<<PD4);
 2f2:	94 9a       	sbi	0x12, 4	; 18
 2f4:	08 95       	ret
		else if(a == eS_PORTD5)
 2f6:	83 32       	cpi	r24, 0x23	; 35
 2f8:	91 05       	cpc	r25, r1
 2fa:	11 f4       	brne	.+4      	; 0x300 <pinChange+0x26e>
		  PORTD |= (1<<PD5);
 2fc:	95 9a       	sbi	0x12, 5	; 18
 2fe:	08 95       	ret
		else if(a == eS_PORTD6)
 300:	84 32       	cpi	r24, 0x24	; 36
 302:	91 05       	cpc	r25, r1
 304:	11 f4       	brne	.+4      	; 0x30a <pinChange+0x278>
		  PORTD |= (1<<PD6);
 306:	96 9a       	sbi	0x12, 6	; 18
 308:	08 95       	ret
		else if(a == eS_PORTD7)
 30a:	85 97       	sbiw	r24, 0x25	; 37
 30c:	09 f4       	brne	.+2      	; 0x310 <pinChange+0x27e>
		  PORTD |= (1<<PD7);
 30e:	97 9a       	sbi	0x12, 7	; 18
 310:	08 95       	ret

00000312 <Lcd4_Port>:
//End LCD 8 Bit Interfacing Functions

//LCD 4 Bit Interfacing Functions

void Lcd4_Port(char a)
{
 312:	cf 93       	push	r28
 314:	c8 2f       	mov	r28, r24
	if(a & 1)
 316:	80 ff       	sbrs	r24, 0
 318:	07 c0       	rjmp	.+14     	; 0x328 <Lcd4_Port+0x16>
	pinChange(D4,1);
 31a:	61 e0       	ldi	r22, 0x01	; 1
 31c:	70 e0       	ldi	r23, 0x00	; 0
 31e:	84 e0       	ldi	r24, 0x04	; 4
 320:	90 e0       	ldi	r25, 0x00	; 0
 322:	0e 94 49 00 	call	0x92	; 0x92 <pinChange>
 326:	06 c0       	rjmp	.+12     	; 0x334 <Lcd4_Port+0x22>
	else
	pinChange(D4,0);
 328:	60 e0       	ldi	r22, 0x00	; 0
 32a:	70 e0       	ldi	r23, 0x00	; 0
 32c:	84 e0       	ldi	r24, 0x04	; 4
 32e:	90 e0       	ldi	r25, 0x00	; 0
 330:	0e 94 49 00 	call	0x92	; 0x92 <pinChange>
	
	if(a & 2)
 334:	c1 ff       	sbrs	r28, 1
 336:	07 c0       	rjmp	.+14     	; 0x346 <Lcd4_Port+0x34>
	pinChange(D5,1);
 338:	61 e0       	ldi	r22, 0x01	; 1
 33a:	70 e0       	ldi	r23, 0x00	; 0
 33c:	85 e0       	ldi	r24, 0x05	; 5
 33e:	90 e0       	ldi	r25, 0x00	; 0
 340:	0e 94 49 00 	call	0x92	; 0x92 <pinChange>
 344:	06 c0       	rjmp	.+12     	; 0x352 <Lcd4_Port+0x40>
	else
	pinChange(D5,0);
 346:	60 e0       	ldi	r22, 0x00	; 0
 348:	70 e0       	ldi	r23, 0x00	; 0
 34a:	85 e0       	ldi	r24, 0x05	; 5
 34c:	90 e0       	ldi	r25, 0x00	; 0
 34e:	0e 94 49 00 	call	0x92	; 0x92 <pinChange>
	
	if(a & 4)
 352:	c2 ff       	sbrs	r28, 2
 354:	07 c0       	rjmp	.+14     	; 0x364 <Lcd4_Port+0x52>
	pinChange(D6,1);
 356:	61 e0       	ldi	r22, 0x01	; 1
 358:	70 e0       	ldi	r23, 0x00	; 0
 35a:	86 e0       	ldi	r24, 0x06	; 6
 35c:	90 e0       	ldi	r25, 0x00	; 0
 35e:	0e 94 49 00 	call	0x92	; 0x92 <pinChange>
 362:	06 c0       	rjmp	.+12     	; 0x370 <Lcd4_Port+0x5e>
	else
	pinChange(D6,0);
 364:	60 e0       	ldi	r22, 0x00	; 0
 366:	70 e0       	ldi	r23, 0x00	; 0
 368:	86 e0       	ldi	r24, 0x06	; 6
 36a:	90 e0       	ldi	r25, 0x00	; 0
 36c:	0e 94 49 00 	call	0x92	; 0x92 <pinChange>
	
	if(a & 8)
 370:	c3 ff       	sbrs	r28, 3
 372:	07 c0       	rjmp	.+14     	; 0x382 <Lcd4_Port+0x70>
	pinChange(D7,1);
 374:	61 e0       	ldi	r22, 0x01	; 1
 376:	70 e0       	ldi	r23, 0x00	; 0
 378:	87 e0       	ldi	r24, 0x07	; 7
 37a:	90 e0       	ldi	r25, 0x00	; 0
 37c:	0e 94 49 00 	call	0x92	; 0x92 <pinChange>
 380:	06 c0       	rjmp	.+12     	; 0x38e <Lcd4_Port+0x7c>
	else
	pinChange(D7,0);
 382:	60 e0       	ldi	r22, 0x00	; 0
 384:	70 e0       	ldi	r23, 0x00	; 0
 386:	87 e0       	ldi	r24, 0x07	; 7
 388:	90 e0       	ldi	r25, 0x00	; 0
 38a:	0e 94 49 00 	call	0x92	; 0x92 <pinChange>
}
 38e:	cf 91       	pop	r28
 390:	08 95       	ret

00000392 <Lcd4_Cmd>:
void Lcd4_Cmd(char a)
{
 392:	cf 93       	push	r28
 394:	c8 2f       	mov	r28, r24
	pinChange(RS,0);             // => RS = 0
 396:	60 e0       	ldi	r22, 0x00	; 0
 398:	70 e0       	ldi	r23, 0x00	; 0
 39a:	8a e1       	ldi	r24, 0x1A	; 26
 39c:	90 e0       	ldi	r25, 0x00	; 0
 39e:	0e 94 49 00 	call	0x92	; 0x92 <pinChange>
	Lcd4_Port(a);
 3a2:	8c 2f       	mov	r24, r28
 3a4:	0e 94 89 01 	call	0x312	; 0x312 <Lcd4_Port>
	pinChange(EN,1);            // => E = 1
 3a8:	61 e0       	ldi	r22, 0x01	; 1
 3aa:	70 e0       	ldi	r23, 0x00	; 0
 3ac:	8b e1       	ldi	r24, 0x1B	; 27
 3ae:	90 e0       	ldi	r25, 0x00	; 0
 3b0:	0e 94 49 00 	call	0x92	; 0x92 <pinChange>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3b4:	89 ef       	ldi	r24, 0xF9	; 249
 3b6:	90 e0       	ldi	r25, 0x00	; 0
 3b8:	01 97       	sbiw	r24, 0x01	; 1
 3ba:	f1 f7       	brne	.-4      	; 0x3b8 <Lcd4_Cmd+0x26>
 3bc:	00 c0       	rjmp	.+0      	; 0x3be <Lcd4_Cmd+0x2c>
 3be:	00 00       	nop
	_delay_ms(1);
	pinChange(EN,0);             // => E = 0
 3c0:	60 e0       	ldi	r22, 0x00	; 0
 3c2:	70 e0       	ldi	r23, 0x00	; 0
 3c4:	8b e1       	ldi	r24, 0x1B	; 27
 3c6:	90 e0       	ldi	r25, 0x00	; 0
 3c8:	0e 94 49 00 	call	0x92	; 0x92 <pinChange>
 3cc:	89 ef       	ldi	r24, 0xF9	; 249
 3ce:	90 e0       	ldi	r25, 0x00	; 0
 3d0:	01 97       	sbiw	r24, 0x01	; 1
 3d2:	f1 f7       	brne	.-4      	; 0x3d0 <Lcd4_Cmd+0x3e>
 3d4:	00 c0       	rjmp	.+0      	; 0x3d6 <Lcd4_Cmd+0x44>
 3d6:	00 00       	nop
	_delay_ms(1);
}
 3d8:	cf 91       	pop	r28
 3da:	08 95       	ret

000003dc <Lcd4_Clear>:

void Lcd4_Clear()
{
	Lcd4_Cmd(0);
 3dc:	80 e0       	ldi	r24, 0x00	; 0
 3de:	0e 94 c9 01 	call	0x392	; 0x392 <Lcd4_Cmd>
	Lcd4_Cmd(1);
 3e2:	81 e0       	ldi	r24, 0x01	; 1
 3e4:	0e 94 c9 01 	call	0x392	; 0x392 <Lcd4_Cmd>
 3e8:	08 95       	ret

000003ea <Lcd4_Set_Cursor>:
}

void Lcd4_Set_Cursor(char a, char b)
{
 3ea:	cf 93       	push	r28
 3ec:	c6 2f       	mov	r28, r22
	char temp,z,y;
	if(a == 1)
 3ee:	81 30       	cpi	r24, 0x01	; 1
 3f0:	59 f4       	brne	.+22     	; 0x408 <Lcd4_Set_Cursor+0x1e>
	{
		temp = 0x80 + b;
 3f2:	80 e8       	ldi	r24, 0x80	; 128
 3f4:	86 0f       	add	r24, r22
		z = temp>>4;
		y = (0x80+b) & 0x0F;
		Lcd4_Cmd(z);
 3f6:	82 95       	swap	r24
 3f8:	8f 70       	andi	r24, 0x0F	; 15
 3fa:	0e 94 c9 01 	call	0x392	; 0x392 <Lcd4_Cmd>
		Lcd4_Cmd(y);
 3fe:	8c 2f       	mov	r24, r28
 400:	8f 70       	andi	r24, 0x0F	; 15
 402:	0e 94 c9 01 	call	0x392	; 0x392 <Lcd4_Cmd>
 406:	0c c0       	rjmp	.+24     	; 0x420 <Lcd4_Set_Cursor+0x36>
	}
	else if(a == 2)
 408:	82 30       	cpi	r24, 0x02	; 2
 40a:	51 f4       	brne	.+20     	; 0x420 <Lcd4_Set_Cursor+0x36>
	{
		temp = 0xC0 + b;
 40c:	80 ec       	ldi	r24, 0xC0	; 192
 40e:	86 0f       	add	r24, r22
		z = temp>>4;
		y = (0xC0+b) & 0x0F;
		Lcd4_Cmd(z);
 410:	82 95       	swap	r24
 412:	8f 70       	andi	r24, 0x0F	; 15
 414:	0e 94 c9 01 	call	0x392	; 0x392 <Lcd4_Cmd>
		Lcd4_Cmd(y);
 418:	8c 2f       	mov	r24, r28
 41a:	8f 70       	andi	r24, 0x0F	; 15
 41c:	0e 94 c9 01 	call	0x392	; 0x392 <Lcd4_Cmd>
	}
}
 420:	cf 91       	pop	r28
 422:	08 95       	ret

00000424 <Lcd4_Init>:

void Lcd4_Init()
{
	Lcd4_Port(0x00);
 424:	80 e0       	ldi	r24, 0x00	; 0
 426:	0e 94 89 01 	call	0x312	; 0x312 <Lcd4_Port>
 42a:	87 e8       	ldi	r24, 0x87	; 135
 42c:	93 e1       	ldi	r25, 0x13	; 19
 42e:	01 97       	sbiw	r24, 0x01	; 1
 430:	f1 f7       	brne	.-4      	; 0x42e <Lcd4_Init+0xa>
 432:	00 c0       	rjmp	.+0      	; 0x434 <Lcd4_Init+0x10>
 434:	00 00       	nop
	_delay_ms(20);
	///////////// Reset process from datasheet /////////
	Lcd4_Cmd(0x03);
 436:	83 e0       	ldi	r24, 0x03	; 3
 438:	0e 94 c9 01 	call	0x392	; 0x392 <Lcd4_Cmd>
 43c:	81 ee       	ldi	r24, 0xE1	; 225
 43e:	94 e0       	ldi	r25, 0x04	; 4
 440:	01 97       	sbiw	r24, 0x01	; 1
 442:	f1 f7       	brne	.-4      	; 0x440 <Lcd4_Init+0x1c>
 444:	00 c0       	rjmp	.+0      	; 0x446 <Lcd4_Init+0x22>
 446:	00 00       	nop
	_delay_ms(5);
	Lcd4_Cmd(0x03);
 448:	83 e0       	ldi	r24, 0x03	; 3
 44a:	0e 94 c9 01 	call	0x392	; 0x392 <Lcd4_Cmd>
 44e:	8d eb       	ldi	r24, 0xBD	; 189
 450:	9a e0       	ldi	r25, 0x0A	; 10
 452:	01 97       	sbiw	r24, 0x01	; 1
 454:	f1 f7       	brne	.-4      	; 0x452 <Lcd4_Init+0x2e>
 456:	00 c0       	rjmp	.+0      	; 0x458 <Lcd4_Init+0x34>
 458:	00 00       	nop
	_delay_ms(11);
	Lcd4_Cmd(0x03);
 45a:	83 e0       	ldi	r24, 0x03	; 3
 45c:	0e 94 c9 01 	call	0x392	; 0x392 <Lcd4_Cmd>
	/////////////////////////////////////////////////////
	Lcd4_Cmd(0x02);
 460:	82 e0       	ldi	r24, 0x02	; 2
 462:	0e 94 c9 01 	call	0x392	; 0x392 <Lcd4_Cmd>
	Lcd4_Cmd(0x02);
 466:	82 e0       	ldi	r24, 0x02	; 2
 468:	0e 94 c9 01 	call	0x392	; 0x392 <Lcd4_Cmd>
	Lcd4_Cmd(0x08);
 46c:	88 e0       	ldi	r24, 0x08	; 8
 46e:	0e 94 c9 01 	call	0x392	; 0x392 <Lcd4_Cmd>
	Lcd4_Cmd(0x00);
 472:	80 e0       	ldi	r24, 0x00	; 0
 474:	0e 94 c9 01 	call	0x392	; 0x392 <Lcd4_Cmd>
	Lcd4_Cmd(0x0C);
 478:	8c e0       	ldi	r24, 0x0C	; 12
 47a:	0e 94 c9 01 	call	0x392	; 0x392 <Lcd4_Cmd>
	Lcd4_Cmd(0x00);
 47e:	80 e0       	ldi	r24, 0x00	; 0
 480:	0e 94 c9 01 	call	0x392	; 0x392 <Lcd4_Cmd>
	Lcd4_Cmd(0x06);
 484:	86 e0       	ldi	r24, 0x06	; 6
 486:	0e 94 c9 01 	call	0x392	; 0x392 <Lcd4_Cmd>
 48a:	08 95       	ret

0000048c <Lcd4_Write_Char>:
}

void Lcd4_Write_Char(char a)
{
 48c:	cf 93       	push	r28
 48e:	c8 2f       	mov	r28, r24
	char temp,y;
	temp = a&0x0F;
	y = a&0xF0;
	pinChange(RS,1);             // => RS = 1
 490:	61 e0       	ldi	r22, 0x01	; 1
 492:	70 e0       	ldi	r23, 0x00	; 0
 494:	8a e1       	ldi	r24, 0x1A	; 26
 496:	90 e0       	ldi	r25, 0x00	; 0
 498:	0e 94 49 00 	call	0x92	; 0x92 <pinChange>
	Lcd4_Port(y>>4);             //Data transfer
 49c:	8c 2f       	mov	r24, r28
 49e:	82 95       	swap	r24
 4a0:	8f 70       	andi	r24, 0x0F	; 15
 4a2:	0e 94 89 01 	call	0x312	; 0x312 <Lcd4_Port>
	pinChange(EN,1);
 4a6:	61 e0       	ldi	r22, 0x01	; 1
 4a8:	70 e0       	ldi	r23, 0x00	; 0
 4aa:	8b e1       	ldi	r24, 0x1B	; 27
 4ac:	90 e0       	ldi	r25, 0x00	; 0
 4ae:	0e 94 49 00 	call	0x92	; 0x92 <pinChange>
 4b2:	89 ef       	ldi	r24, 0xF9	; 249
 4b4:	90 e0       	ldi	r25, 0x00	; 0
 4b6:	01 97       	sbiw	r24, 0x01	; 1
 4b8:	f1 f7       	brne	.-4      	; 0x4b6 <Lcd4_Write_Char+0x2a>
 4ba:	00 c0       	rjmp	.+0      	; 0x4bc <Lcd4_Write_Char+0x30>
 4bc:	00 00       	nop
	_delay_ms(1);
	pinChange(EN,0);
 4be:	60 e0       	ldi	r22, 0x00	; 0
 4c0:	70 e0       	ldi	r23, 0x00	; 0
 4c2:	8b e1       	ldi	r24, 0x1B	; 27
 4c4:	90 e0       	ldi	r25, 0x00	; 0
 4c6:	0e 94 49 00 	call	0x92	; 0x92 <pinChange>
 4ca:	89 ef       	ldi	r24, 0xF9	; 249
 4cc:	90 e0       	ldi	r25, 0x00	; 0
 4ce:	01 97       	sbiw	r24, 0x01	; 1
 4d0:	f1 f7       	brne	.-4      	; 0x4ce <Lcd4_Write_Char+0x42>
 4d2:	00 c0       	rjmp	.+0      	; 0x4d4 <Lcd4_Write_Char+0x48>
 4d4:	00 00       	nop
	_delay_ms(1);
	Lcd4_Port(temp);
 4d6:	8c 2f       	mov	r24, r28
 4d8:	8f 70       	andi	r24, 0x0F	; 15
 4da:	0e 94 89 01 	call	0x312	; 0x312 <Lcd4_Port>
	pinChange(EN,1);
 4de:	61 e0       	ldi	r22, 0x01	; 1
 4e0:	70 e0       	ldi	r23, 0x00	; 0
 4e2:	8b e1       	ldi	r24, 0x1B	; 27
 4e4:	90 e0       	ldi	r25, 0x00	; 0
 4e6:	0e 94 49 00 	call	0x92	; 0x92 <pinChange>
 4ea:	89 ef       	ldi	r24, 0xF9	; 249
 4ec:	90 e0       	ldi	r25, 0x00	; 0
 4ee:	01 97       	sbiw	r24, 0x01	; 1
 4f0:	f1 f7       	brne	.-4      	; 0x4ee <Lcd4_Write_Char+0x62>
 4f2:	00 c0       	rjmp	.+0      	; 0x4f4 <Lcd4_Write_Char+0x68>
 4f4:	00 00       	nop
	_delay_ms(1);
	pinChange(EN,0);
 4f6:	60 e0       	ldi	r22, 0x00	; 0
 4f8:	70 e0       	ldi	r23, 0x00	; 0
 4fa:	8b e1       	ldi	r24, 0x1B	; 27
 4fc:	90 e0       	ldi	r25, 0x00	; 0
 4fe:	0e 94 49 00 	call	0x92	; 0x92 <pinChange>
 502:	89 ef       	ldi	r24, 0xF9	; 249
 504:	90 e0       	ldi	r25, 0x00	; 0
 506:	01 97       	sbiw	r24, 0x01	; 1
 508:	f1 f7       	brne	.-4      	; 0x506 <Lcd4_Write_Char+0x7a>
 50a:	00 c0       	rjmp	.+0      	; 0x50c <Lcd4_Write_Char+0x80>
 50c:	00 00       	nop
	_delay_ms(1);
}
 50e:	cf 91       	pop	r28
 510:	08 95       	ret

00000512 <Lcd4_Write_String>:

void Lcd4_Write_String(char *a)
{
 512:	cf 93       	push	r28
 514:	df 93       	push	r29
 516:	ec 01       	movw	r28, r24
	int i;
	for(i=0;a[i]!='\0';i++)
 518:	88 81       	ld	r24, Y
 51a:	88 23       	and	r24, r24
 51c:	31 f0       	breq	.+12     	; 0x52a <Lcd4_Write_String+0x18>
 51e:	21 96       	adiw	r28, 0x01	; 1
	Lcd4_Write_Char(a[i]);
 520:	0e 94 46 02 	call	0x48c	; 0x48c <Lcd4_Write_Char>
}

void Lcd4_Write_String(char *a)
{
	int i;
	for(i=0;a[i]!='\0';i++)
 524:	89 91       	ld	r24, Y+
 526:	81 11       	cpse	r24, r1
 528:	fb cf       	rjmp	.-10     	; 0x520 <Lcd4_Write_String+0xe>
	Lcd4_Write_Char(a[i]);
}
 52a:	df 91       	pop	r29
 52c:	cf 91       	pop	r28
 52e:	08 95       	ret

00000530 <__vector_1>:
static volatile int i = 0 ; // current state of pulse
static volatile int j = 0 ; // current state of pulse

int TimerOverflow = 0;
ISR(INT0_vect)
{
 530:	1f 92       	push	r1
 532:	0f 92       	push	r0
 534:	0f b6       	in	r0, 0x3f	; 63
 536:	0f 92       	push	r0
 538:	11 24       	eor	r1, r1
 53a:	8f 93       	push	r24
 53c:	9f 93       	push	r25
	if (i==1){
 53e:	80 91 74 00 	lds	r24, 0x0074
 542:	90 91 75 00 	lds	r25, 0x0075
 546:	01 97       	sbiw	r24, 0x01	; 1
 548:	69 f4       	brne	.+26     	; 0x564 <__vector_1+0x34>
		TCCR1B=0;
 54a:	1e bc       	out	0x2e, r1	; 46
		pulse=TCNT1;
 54c:	8c b5       	in	r24, 0x2c	; 44
 54e:	9d b5       	in	r25, 0x2d	; 45
 550:	90 93 77 00 	sts	0x0077, r25
 554:	80 93 76 00 	sts	0x0076, r24
		TCNT1=0;
 558:	1d bc       	out	0x2d, r1	; 45
 55a:	1c bc       	out	0x2c, r1	; 44
		i=0;
 55c:	10 92 75 00 	sts	0x0075, r1
 560:	10 92 74 00 	sts	0x0074, r1
	}

	if (i==0){
 564:	80 91 74 00 	lds	r24, 0x0074
 568:	90 91 75 00 	lds	r25, 0x0075
 56c:	89 2b       	or	r24, r25
 56e:	49 f4       	brne	.+18     	; 0x582 <__vector_1+0x52>
		TCCR1B|=(1<<CS10);
 570:	8e b5       	in	r24, 0x2e	; 46
 572:	81 60       	ori	r24, 0x01	; 1
 574:	8e bd       	out	0x2e, r24	; 46
		i=1;
 576:	81 e0       	ldi	r24, 0x01	; 1
 578:	90 e0       	ldi	r25, 0x00	; 0
 57a:	90 93 75 00 	sts	0x0075, r25
 57e:	80 93 74 00 	sts	0x0074, r24
	}
//	GIFR|=(1<<INTF0);
}
 582:	9f 91       	pop	r25
 584:	8f 91       	pop	r24
 586:	0f 90       	pop	r0
 588:	0f be       	out	0x3f, r0	; 63
 58a:	0f 90       	pop	r0
 58c:	1f 90       	pop	r1
 58e:	18 95       	reti

00000590 <__vector_2>:

ISR(INT1_vect)
{
 590:	1f 92       	push	r1
 592:	0f 92       	push	r0
 594:	0f b6       	in	r0, 0x3f	; 63
 596:	0f 92       	push	r0
 598:	11 24       	eor	r1, r1
 59a:	8f 93       	push	r24
 59c:	9f 93       	push	r25
	if (j==1){
 59e:	80 91 72 00 	lds	r24, 0x0072
 5a2:	90 91 73 00 	lds	r25, 0x0073
 5a6:	01 97       	sbiw	r24, 0x01	; 1
 5a8:	69 f4       	brne	.+26     	; 0x5c4 <__vector_2+0x34>
		TCCR1B=0;
 5aa:	1e bc       	out	0x2e, r1	; 46
		pulse=TCNT1;
 5ac:	8c b5       	in	r24, 0x2c	; 44
 5ae:	9d b5       	in	r25, 0x2d	; 45
 5b0:	90 93 77 00 	sts	0x0077, r25
 5b4:	80 93 76 00 	sts	0x0076, r24
		TCNT1=0;
 5b8:	1d bc       	out	0x2d, r1	; 45
 5ba:	1c bc       	out	0x2c, r1	; 44
		j=0;
 5bc:	10 92 73 00 	sts	0x0073, r1
 5c0:	10 92 72 00 	sts	0x0072, r1
	}

	if (j==0){
 5c4:	80 91 72 00 	lds	r24, 0x0072
 5c8:	90 91 73 00 	lds	r25, 0x0073
 5cc:	89 2b       	or	r24, r25
 5ce:	49 f4       	brne	.+18     	; 0x5e2 <__vector_2+0x52>
		TCCR1B|=(1<<CS10);
 5d0:	8e b5       	in	r24, 0x2e	; 46
 5d2:	81 60       	ori	r24, 0x01	; 1
 5d4:	8e bd       	out	0x2e, r24	; 46
		j=1;
 5d6:	81 e0       	ldi	r24, 0x01	; 1
 5d8:	90 e0       	ldi	r25, 0x00	; 0
 5da:	90 93 73 00 	sts	0x0073, r25
 5de:	80 93 72 00 	sts	0x0072, r24
	}
	//GIFR|=(1<<INTF1);
}
 5e2:	9f 91       	pop	r25
 5e4:	8f 91       	pop	r24
 5e6:	0f 90       	pop	r0
 5e8:	0f be       	out	0x3f, r0	; 63
 5ea:	0f 90       	pop	r0
 5ec:	1f 90       	pop	r1
 5ee:	18 95       	reti

000005f0 <main>:
	TimerOverflow++;	// Increment Timer Overflow count 
}*/


int main(void)
{
 5f0:	cf 93       	push	r28
 5f2:	df 93       	push	r29
 5f4:	cd b7       	in	r28, 0x3d	; 61
 5f6:	de b7       	in	r29, 0x3e	; 62
 5f8:	60 97       	sbiw	r28, 0x10	; 16
 5fa:	0f b6       	in	r0, 0x3f	; 63
 5fc:	f8 94       	cli
 5fe:	de bf       	out	0x3e, r29	; 62
 600:	0f be       	out	0x3f, r0	; 63
 602:	cd bf       	out	0x3d, r28	; 61
	float distance = 0.0;
	int16_t val = 0 ;
	char num[16]; 
	
	DDRC= 0xFF;
 604:	8f ef       	ldi	r24, 0xFF	; 255
 606:	84 bb       	out	0x14, r24	; 20
	DDRA= 0xFF;
 608:	8a bb       	out	0x1a, r24	; 26
	DDRD = 0b11111011 ;
 60a:	8b ef       	ldi	r24, 0xFB	; 251
 60c:	81 bb       	out	0x11, r24	; 17
 60e:	83 ed       	ldi	r24, 0xD3	; 211
 610:	90 e3       	ldi	r25, 0x30	; 48
 612:	01 97       	sbiw	r24, 0x01	; 1
 614:	f1 f7       	brne	.-4      	; 0x612 <main+0x22>
 616:	00 c0       	rjmp	.+0      	; 0x618 <main+0x28>
 618:	00 00       	nop
	_delay_ms(50) ;
	Lcd4_Init();
 61a:	0e 94 12 02 	call	0x424	; 0x424 <Lcd4_Init>
	GICR |= (1<<INT0); //using intrupt0
 61e:	8b b7       	in	r24, 0x3b	; 59
 620:	80 64       	ori	r24, 0x40	; 64
 622:	8b bf       	out	0x3b, r24	; 59
	//GICR |= (1<<INT2);
	MCUCR |= (1<<ISC00) ; //sonar pulse gets high to low or low to high
 624:	85 b7       	in	r24, 0x35	; 53
 626:	81 60       	ori	r24, 0x01	; 1
 628:	85 bf       	out	0x35, r24	; 53
	//MCUCSR |= (1<<ISC01);
	TCCR1A = 0 ;
 62a:	1f bc       	out	0x2f, r1	; 47
	sei (); 
 62c:	78 94       	sei
	{
		
		PORTD |= (1<<PIND0) ;
		_delay_us(15);
		PORTD &= ~(1<<PIND0) ;
		val = pulse / 58 ;
 62e:	0a e3       	ldi	r16, 0x3A	; 58
 630:	10 e0       	ldi	r17, 0x00	; 0

	
	while(1)
	{
		
		PORTD |= (1<<PIND0) ;
 632:	90 9a       	sbi	0x12, 0	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 634:	95 e0       	ldi	r25, 0x05	; 5
 636:	9a 95       	dec	r25
 638:	f1 f7       	brne	.-4      	; 0x636 <main+0x46>
		_delay_us(15);
		PORTD &= ~(1<<PIND0) ;
 63a:	90 98       	cbi	0x12, 0	; 18
		val = pulse / 58 ;
 63c:	80 91 76 00 	lds	r24, 0x0076
 640:	90 91 77 00 	lds	r25, 0x0077
 644:	b8 01       	movw	r22, r16
 646:	0e 94 45 03 	call	0x68a	; 0x68a <__divmodhi4>
 64a:	cb 01       	movw	r24, r22
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 64c:	4a e0       	ldi	r20, 0x0A	; 10
 64e:	be 01       	movw	r22, r28
 650:	6f 5f       	subi	r22, 0xFF	; 255
 652:	7f 4f       	sbci	r23, 0xFF	; 255
 654:	0e 94 6d 03 	call	0x6da	; 0x6da <__itoa_ncheck>
		//ftoa (12.4756565 , num , 3) ;
		itoa  (val, num ,10) ;
		//itoa  (50, num ,10) ;
		Lcd4_Clear();
 658:	0e 94 ee 01 	call	0x3dc	; 0x3dc <Lcd4_Clear>
		Lcd4_Set_Cursor(1,0);
 65c:	60 e0       	ldi	r22, 0x00	; 0
 65e:	81 e0       	ldi	r24, 0x01	; 1
 660:	0e 94 f5 01 	call	0x3ea	; 0x3ea <Lcd4_Set_Cursor>
		Lcd4_Write_String("Distance Value: ");
 664:	80 e6       	ldi	r24, 0x60	; 96
 666:	90 e0       	ldi	r25, 0x00	; 0
 668:	0e 94 89 02 	call	0x512	; 0x512 <Lcd4_Write_String>
		Lcd4_Set_Cursor(2,0);
 66c:	60 e0       	ldi	r22, 0x00	; 0
 66e:	82 e0       	ldi	r24, 0x02	; 2
 670:	0e 94 f5 01 	call	0x3ea	; 0x3ea <Lcd4_Set_Cursor>
		Lcd4_Write_String(num);
 674:	ce 01       	movw	r24, r28
 676:	01 96       	adiw	r24, 0x01	; 1
 678:	0e 94 89 02 	call	0x512	; 0x512 <Lcd4_Write_String>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 67c:	87 ea       	ldi	r24, 0xA7	; 167
 67e:	91 e6       	ldi	r25, 0x61	; 97
 680:	01 97       	sbiw	r24, 0x01	; 1
 682:	f1 f7       	brne	.-4      	; 0x680 <main+0x90>
 684:	00 c0       	rjmp	.+0      	; 0x686 <main+0x96>
 686:	00 00       	nop
 688:	d4 cf       	rjmp	.-88     	; 0x632 <main+0x42>

0000068a <__divmodhi4>:
 68a:	97 fb       	bst	r25, 7
 68c:	07 2e       	mov	r0, r23
 68e:	16 f4       	brtc	.+4      	; 0x694 <__divmodhi4+0xa>
 690:	00 94       	com	r0
 692:	07 d0       	rcall	.+14     	; 0x6a2 <__divmodhi4_neg1>
 694:	77 fd       	sbrc	r23, 7
 696:	09 d0       	rcall	.+18     	; 0x6aa <__divmodhi4_neg2>
 698:	0e 94 59 03 	call	0x6b2	; 0x6b2 <__udivmodhi4>
 69c:	07 fc       	sbrc	r0, 7
 69e:	05 d0       	rcall	.+10     	; 0x6aa <__divmodhi4_neg2>
 6a0:	3e f4       	brtc	.+14     	; 0x6b0 <__divmodhi4_exit>

000006a2 <__divmodhi4_neg1>:
 6a2:	90 95       	com	r25
 6a4:	81 95       	neg	r24
 6a6:	9f 4f       	sbci	r25, 0xFF	; 255
 6a8:	08 95       	ret

000006aa <__divmodhi4_neg2>:
 6aa:	70 95       	com	r23
 6ac:	61 95       	neg	r22
 6ae:	7f 4f       	sbci	r23, 0xFF	; 255

000006b0 <__divmodhi4_exit>:
 6b0:	08 95       	ret

000006b2 <__udivmodhi4>:
 6b2:	aa 1b       	sub	r26, r26
 6b4:	bb 1b       	sub	r27, r27
 6b6:	51 e1       	ldi	r21, 0x11	; 17
 6b8:	07 c0       	rjmp	.+14     	; 0x6c8 <__udivmodhi4_ep>

000006ba <__udivmodhi4_loop>:
 6ba:	aa 1f       	adc	r26, r26
 6bc:	bb 1f       	adc	r27, r27
 6be:	a6 17       	cp	r26, r22
 6c0:	b7 07       	cpc	r27, r23
 6c2:	10 f0       	brcs	.+4      	; 0x6c8 <__udivmodhi4_ep>
 6c4:	a6 1b       	sub	r26, r22
 6c6:	b7 0b       	sbc	r27, r23

000006c8 <__udivmodhi4_ep>:
 6c8:	88 1f       	adc	r24, r24
 6ca:	99 1f       	adc	r25, r25
 6cc:	5a 95       	dec	r21
 6ce:	a9 f7       	brne	.-22     	; 0x6ba <__udivmodhi4_loop>
 6d0:	80 95       	com	r24
 6d2:	90 95       	com	r25
 6d4:	bc 01       	movw	r22, r24
 6d6:	cd 01       	movw	r24, r26
 6d8:	08 95       	ret

000006da <__itoa_ncheck>:
 6da:	bb 27       	eor	r27, r27
 6dc:	4a 30       	cpi	r20, 0x0A	; 10
 6de:	31 f4       	brne	.+12     	; 0x6ec <__itoa_ncheck+0x12>
 6e0:	99 23       	and	r25, r25
 6e2:	22 f4       	brpl	.+8      	; 0x6ec <__itoa_ncheck+0x12>
 6e4:	bd e2       	ldi	r27, 0x2D	; 45
 6e6:	90 95       	com	r25
 6e8:	81 95       	neg	r24
 6ea:	9f 4f       	sbci	r25, 0xFF	; 255
 6ec:	0c 94 79 03 	jmp	0x6f2	; 0x6f2 <__utoa_common>

000006f0 <__utoa_ncheck>:
 6f0:	bb 27       	eor	r27, r27

000006f2 <__utoa_common>:
 6f2:	fb 01       	movw	r30, r22
 6f4:	55 27       	eor	r21, r21
 6f6:	aa 27       	eor	r26, r26
 6f8:	88 0f       	add	r24, r24
 6fa:	99 1f       	adc	r25, r25
 6fc:	aa 1f       	adc	r26, r26
 6fe:	a4 17       	cp	r26, r20
 700:	10 f0       	brcs	.+4      	; 0x706 <__utoa_common+0x14>
 702:	a4 1b       	sub	r26, r20
 704:	83 95       	inc	r24
 706:	50 51       	subi	r21, 0x10	; 16
 708:	b9 f7       	brne	.-18     	; 0x6f8 <__utoa_common+0x6>
 70a:	a0 5d       	subi	r26, 0xD0	; 208
 70c:	aa 33       	cpi	r26, 0x3A	; 58
 70e:	08 f0       	brcs	.+2      	; 0x712 <__utoa_common+0x20>
 710:	a9 5d       	subi	r26, 0xD9	; 217
 712:	a1 93       	st	Z+, r26
 714:	00 97       	sbiw	r24, 0x00	; 0
 716:	79 f7       	brne	.-34     	; 0x6f6 <__utoa_common+0x4>
 718:	b1 11       	cpse	r27, r1
 71a:	b1 93       	st	Z+, r27
 71c:	11 92       	st	Z+, r1
 71e:	cb 01       	movw	r24, r22
 720:	0c 94 92 03 	jmp	0x724	; 0x724 <strrev>

00000724 <strrev>:
 724:	dc 01       	movw	r26, r24
 726:	fc 01       	movw	r30, r24
 728:	67 2f       	mov	r22, r23
 72a:	71 91       	ld	r23, Z+
 72c:	77 23       	and	r23, r23
 72e:	e1 f7       	brne	.-8      	; 0x728 <strrev+0x4>
 730:	32 97       	sbiw	r30, 0x02	; 2
 732:	04 c0       	rjmp	.+8      	; 0x73c <strrev+0x18>
 734:	7c 91       	ld	r23, X
 736:	6d 93       	st	X+, r22
 738:	70 83       	st	Z, r23
 73a:	62 91       	ld	r22, -Z
 73c:	ae 17       	cp	r26, r30
 73e:	bf 07       	cpc	r27, r31
 740:	c8 f3       	brcs	.-14     	; 0x734 <strrev+0x10>
 742:	08 95       	ret

00000744 <_exit>:
 744:	f8 94       	cli

00000746 <__stop_program>:
 746:	ff cf       	rjmp	.-2      	; 0x746 <__stop_program>
